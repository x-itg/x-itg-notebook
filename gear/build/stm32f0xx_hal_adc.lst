ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f0xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_ADC_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_ADC_Init
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	HAL_ADC_Init:
  25              	.LFB40:
  26              		.file 1 "Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c"
   1:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
   2:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @file    stm32f0xx_hal_adc.c
   4:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           + Peripheral State functions
  11:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  12:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          "stm32f0xx_hal_adc_ex.c".
  13:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
  14:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
  15:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @attention
  16:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
  17:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * Copyright (c) 2016 STMicroelectronics.
  18:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * All rights reserved.
  19:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
  20:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  21:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * in the root directory of this software component.
  22:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  23:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *
  24:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ******************************************************************************
  25:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   @verbatim
  26:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  27:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### ADC peripheral features #####
  28:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  29:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   [..]
  30:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution
  31:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  32:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of 
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 2


  33:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       analog watchdog or overrun events.
  34:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  35:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  36:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  37:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  38:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  39:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  40:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  41:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) Programmable sampling time (common for all channels)
  42:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  43:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC conversion of regular group.
  44:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  45:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  46:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  47:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  48:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  49:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC calibration
  50:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  51:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  52:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       slower speed.
  53:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
  54:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  55:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       Vdda or to an external voltage reference).
  56:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  57:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  58:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      ##### How to use this driver #####
  59:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ==============================================================================
  60:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
  61:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  62:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  63:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
  64:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
  65:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  66:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Enable the ADC interface
  67:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  68:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            Caution: On STM32F0, ADC clock frequency max is 14MHz (refer
  69:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     to device datasheet).
  70:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  71:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  72:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     this maximum frequency.
  73:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  74:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Two clock settings are mandatory: 
  75:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  76:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  77:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  78:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from APB clock
  79:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    or asynchronous clock derived from ADC dedicated HSI RC oscillator
  80:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    14MHz.
  81:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    If asynchronous clock is selected, parameter "HSI14State" must be set either:
  82:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ADC_CONTROL" to let the ADC control 
  83:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      the HSI14 oscillator enable/disable (if not used to supply the main 
  84:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      system clock): feature used if ADC mode LowPowerAutoPowerOff is 
  85:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      enabled.
  86:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    - to "...HSI14State = RCC_HSI14_ON" to maintain the HSI14 oscillator
  87:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                      always enabled: can be used to supply the main system clock.
  88:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  89:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 3


  90:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  91:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
  92:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) __HAL_RCC_ADC1_CLK_ENABLE();                         (mandatory)
  93:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
  94:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                HI14 enable or let under control of ADC:           (optional: if asynchronous clock 
  95:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitTypeDef   RCC_OscInitStructure;
  96:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
  97:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14CalibrationValue = RCC_HSI14CALIBRATION_DEFAULT;
  98:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_ADC_CONTROL;
  99:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.PLL...   (optional if used for system clock)
 100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
 103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
 104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
 107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
 108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
 109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_GPIO_Init()
 110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ADCx_IRQHandler().
 117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_Init().
 121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ================================================================
 129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_Init().
 134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         monitored, thresholds, ...)
 141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Execution of ADC conversions ***
 144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ====================================
 145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 4


 147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         conversion accuracy
 149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         transfer by DMA.
 153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by polling:
 155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start()
 157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (this function must be implemented in user program)
 170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Retrieve conversion results 
 171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 (these functions must be implemented in user program)
 181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 destination variable address.
 183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      *** Deinitialization of ADC ***
 195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      ============================================================
 196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Disable the ADC interface
 199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         (++) ADC clock disable
 203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 5


 204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              (+++) Example:
 205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                    other device clock parameters configuration:
 207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
 208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_OFF; (if not used for system clock
 209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) ADC pins configuration
 212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_DisableIRQ(ADCx_IRQn)
 218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Deinitialize the DMA
 221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_DMA_DeInit().
 222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               using function HAL_NVIC_DisableIRQ(DMAx_Channelx_IRQn)
 224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     *** Callback registration ***
 228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     =============================================
 229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      Use Functions HAL_ADC_RegisterCallback()
 234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      to register an interrupt callback.
 235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      Function HAL_ADC_RegisterCallback() allows to register following callbacks:
 238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      and a pointer to the user callback function.
 246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      Use function HAL_ADC_UnRegisterCallback to reset a callback to the default
 249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      weak function.
 250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      and the Callback ID.
 254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      This function allows to reset following callbacks:
 255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 6


 261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      By default, after the HAL_ADC_Init() and when the state is HAL_ADC_STATE_RESET
 264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      examples HAL_ADC_ConvCpltCallback(), HAL_ADC_ErrorCallback().
 266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      reset to the legacy weak functions in the HAL_ADC_Init()/ HAL_ADC_DeInit() only when
 268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the HAL_ADC_Init()/ HAL_ADC_DeInit()
 272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      Callbacks can be registered/unregistered in HAL_ADC_STATE_READY state only.
 276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      in HAL_ADC_STATE_READY or HAL_ADC_STATE_RESET state,
 278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
 280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      using HAL_ADC_RegisterCallback() before calling HAL_ADC_DeInit()
 283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      or HAL_ADC_Init() function.
 284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      [..]
 285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      are set to the corresponding weak functions.
 289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     @endverbatim
 291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #include "stm32f0xx_hal.h"
 295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @addtogroup STM32F0xx_HAL_Driver
 297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC ADC
 301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief ADC HAL module driver
 302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Fixed timeout values for ADC calibration, enable settling time, disable  */
 314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* settling time.                                                           */
 315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clock frequency,       */
 316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 7


 318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* prescaler 4, sampling time 7.5 ADC clock cycles, resolution 12 bits.     */
 319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: ms                                                                 */
 320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT             ( 2U)
 321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT            ( 2U)
 322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STOP_CONVERSION_TIMEOUT    ( 2U)
 323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               ( 1U)
 328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Unit: us                                                                 */
 332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         ( 10U)
 333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc);
 345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc);
 346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc);
 347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     * @}
 352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     */
 353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim    
 364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) De-initialize the ADC
 370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
 371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
 372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 8


 375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         depending on both possible clock sources: APB clock of HSI clock.
 379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         before HAL_ADC_Init().
 388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
  27              		.loc 1 398 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  43              		.loc 1 399 21
  44 0008 0F23     		movs	r3, #15
  45 000a FB18     		adds	r3, r7, r3
  46 000c 0022     		movs	r2, #0
  47 000e 1A70     		strb	r2, [r3]
 400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpCFGR1 = 0U;
  48              		.loc 1 400 12
  49 0010 0023     		movs	r3, #0
  50 0012 BB60     		str	r3, [r7, #8]
 401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
  51              		.loc 1 403 5
  52 0014 7B68     		ldr	r3, [r7, #4]
  53 0016 002B     		cmp	r3, #0
  54 0018 01D1     		bne	.L2
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 9


 404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     return HAL_ERROR;
  55              		.loc 1 405 12
  56 001a 0123     		movs	r3, #1
  57 001c 25E1     		b	.L3
  58              	.L2:
 406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign)); 
 413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));   
 417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));   
 418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* at RCC top level depending on both possible clock sources:               */
 426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* APB clock or HSI clock.                                                  */
 427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling procedure*/
 428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* - ADC voltage regulator enable                                           */
 432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
  59              		.loc 1 432 11
  60 001e 7B68     		ldr	r3, [r7, #4]
  61 0020 9B6B     		ldr	r3, [r3, #56]
  62              		.loc 1 432 6
  63 0022 002B     		cmp	r3, #0
  64 0024 0AD1     		bne	.L4
 433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Initialize ADC error code */
 435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  65              		.loc 1 435 5
  66 0026 7B68     		ldr	r3, [r7, #4]
  67 0028 0022     		movs	r2, #0
  68 002a DA63     		str	r2, [r3, #60]
 436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
  69              		.loc 1 438 16
  70 002c 7B68     		ldr	r3, [r7, #4]
  71 002e 3422     		movs	r2, #52
  72 0030 0021     		movs	r1, #0
  73 0032 9954     		strb	r1, [r3, r2]
 439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Init the ADC Callback settings */
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 10


 442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Init the low level hardware */
 453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #else
 455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Init the low level hardware */
 456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  74              		.loc 1 456 5
  75 0034 7B68     		ldr	r3, [r7, #4]
  76 0036 1800     		movs	r0, r3
  77 0038 FFF7FEFF 		bl	HAL_ADC_MspInit
  78              	.L4:
 457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* and if there is no conversion on going on regular group (ADC can be      */ 
 463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabled anyway, in case of call of this function to update a parameter   */
 464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on the fly).                                                             */
 465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
  79              		.loc 1 465 7
  80 003c 7B68     		ldr	r3, [r7, #4]
  81 003e 9B6B     		ldr	r3, [r3, #56]
  82 0040 1022     		movs	r2, #16
  83 0042 1340     		ands	r3, r2
  84              		.loc 1 465 6
  85 0044 00D0     		beq	.LCB51
  86 0046 03E1     		b	.L5	@long jump
  87              	.LCB51:
  88              		.loc 1 465 65 discriminator 1
  89 0048 0F23     		movs	r3, #15
  90 004a FB18     		adds	r3, r7, r3
  91 004c 1B78     		ldrb	r3, [r3]
  92 004e 002B     		cmp	r3, #0
  93 0050 00D0     		beq	.LCB56
  94 0052 FDE0     		b	.L5	@long jump
  95              	.LCB56:
 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
 467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  96              		.loc 1 467 8
  97 0054 7B68     		ldr	r3, [r7, #4]
  98 0056 1B68     		ldr	r3, [r3]
  99 0058 9B68     		ldr	r3, [r3, #8]
 100 005a 0422     		movs	r2, #4
 101 005c 1340     		ands	r3, r2
 466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                &&
 102              		.loc 1 466 65
 103 005e 00D0     		beq	.LCB63
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 11


 104 0060 F6E0     		b	.L5	@long jump
 105              	.LCB63:
 468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 106              		.loc 1 470 5
 107 0062 7B68     		ldr	r3, [r7, #4]
 108 0064 9B6B     		ldr	r3, [r3, #56]
 109 0066 834A     		ldr	r2, .L22
 110 0068 1340     		ands	r3, r2
 111 006a 0222     		movs	r2, #2
 112 006c 1A43     		orrs	r2, r3
 113 006e 7B68     		ldr	r3, [r7, #4]
 114 0070 9A63     		str	r2, [r3, #56]
 471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock mode                                                      */
 477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC clock prescaler                                                 */
 478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - ADC resolution                                                      */
 479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_IS_ENABLE(hadc) == RESET)
 115              		.loc 1 479 9
 116 0072 7B68     		ldr	r3, [r7, #4]
 117 0074 1B68     		ldr	r3, [r3]
 118 0076 9B68     		ldr	r3, [r3, #8]
 119 0078 0322     		movs	r2, #3
 120 007a 1340     		ands	r3, r2
 121 007c 012B     		cmp	r3, #1
 122 007e 12D1     		bne	.L6
 123              		.loc 1 479 9 is_stmt 0 discriminator 1
 124 0080 7B68     		ldr	r3, [r7, #4]
 125 0082 1B68     		ldr	r3, [r3]
 126 0084 1B68     		ldr	r3, [r3]
 127 0086 0122     		movs	r2, #1
 128 0088 1340     		ands	r3, r2
 129 008a 012B     		cmp	r3, #1
 130 008c 09D0     		beq	.L7
 131              		.loc 1 479 9 discriminator 4
 132 008e 7B68     		ldr	r3, [r7, #4]
 133 0090 1B68     		ldr	r3, [r3]
 134 0092 DA68     		ldr	r2, [r3, #12]
 135 0094 8023     		movs	r3, #128
 136 0096 1B02     		lsls	r3, r3, #8
 137 0098 1A40     		ands	r2, r3
 138 009a 8023     		movs	r3, #128
 139 009c 1B02     		lsls	r3, r3, #8
 140 009e 9A42     		cmp	r2, r3
 141 00a0 01D1     		bne	.L6
 142              	.L7:
 143              		.loc 1 479 9 discriminator 5
 144 00a2 0123     		movs	r3, #1
 145 00a4 00E0     		b	.L8
 146              	.L6:
 147              		.loc 1 479 9 discriminator 6
 148 00a6 0023     		movs	r3, #0
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 12


 149              	.L8:
 150              		.loc 1 479 8 is_stmt 1 discriminator 8
 151 00a8 002B     		cmp	r3, #0
 152 00aa 16D1     		bne	.L9
 480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Some parameters of this register are not reset, since they are set   */
 482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* by other functions and must be kept in case of usage of this         */
 483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* without needing to reconfigure all other ADC groups/channels         */
 485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameters):                                                         */
 486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*     (set into HAL_ADC_ConfigChannel() )                              */
 488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
 489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC resolution                                      */
 490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR1,
 153              		.loc 1 490 7
 154 00ac 7B68     		ldr	r3, [r7, #4]
 155 00ae 1B68     		ldr	r3, [r3]
 156 00b0 DB68     		ldr	r3, [r3, #12]
 157 00b2 1822     		movs	r2, #24
 158 00b4 9343     		bics	r3, r2
 159 00b6 1900     		movs	r1, r3
 160 00b8 7B68     		ldr	r3, [r7, #4]
 161 00ba 9A68     		ldr	r2, [r3, #8]
 162 00bc 7B68     		ldr	r3, [r7, #4]
 163 00be 1B68     		ldr	r3, [r3]
 164 00c0 0A43     		orrs	r2, r1
 165 00c2 DA60     		str	r2, [r3, #12]
 491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_RES        ,
 492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.Resolution );
 493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Configuration of ADC clock mode: clock source AHB or HSI with        */
 495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* selectable prescaler                                                 */
 496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2    ,
 166              		.loc 1 496 7
 167 00c4 7B68     		ldr	r3, [r7, #4]
 168 00c6 1B68     		ldr	r3, [r3]
 169 00c8 1B69     		ldr	r3, [r3, #16]
 170 00ca 9B00     		lsls	r3, r3, #2
 171 00cc 9908     		lsrs	r1, r3, #2
 172 00ce 7B68     		ldr	r3, [r7, #4]
 173 00d0 5A68     		ldr	r2, [r3, #4]
 174 00d2 7B68     		ldr	r3, [r7, #4]
 175 00d4 1B68     		ldr	r3, [r3]
 176 00d6 0A43     		orrs	r2, r1
 177 00d8 1A61     		str	r2, [r3, #16]
 178              	.L9:
 497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR2_CKMODE         ,
 498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.ClockPrescaler );
 499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - discontinuous mode                                                  */
 503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoWait mode                                               */
 504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - LowPowerAutoPowerOff mode                                           */
 505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - overrun                                                             */
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 13


 507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - external trigger polarity                                           */
 509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - data alignment                                                      */
 510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - resolution                                                          */
 511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - scan direction                                                      */
 512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - DMA continuous request                                              */
 513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 179              		.loc 1 513 9
 180 00da 7B68     		ldr	r3, [r7, #4]
 181 00dc 1B68     		ldr	r3, [r3]
 182              		.loc 1 513 27
 183 00de DA68     		ldr	r2, [r3, #12]
 184              		.loc 1 513 9
 185 00e0 7B68     		ldr	r3, [r7, #4]
 186 00e2 1B68     		ldr	r3, [r3]
 187              		.loc 1 513 27
 188 00e4 6449     		ldr	r1, .L22+4
 189 00e6 0A40     		ands	r2, r1
 190 00e8 DA60     		str	r2, [r3, #12]
 514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTOFF  |
 515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AUTDLY  |
 516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_CONT    |
 517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_OVRMOD  |
 518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTSEL  |
 519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_EXTEN   |
 520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_ALIGN   |
 521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_SCANDIR |
 522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_DMACFG   );
 523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 191              		.loc 1 524 18
 192 00ea 7B68     		ldr	r3, [r7, #4]
 193 00ec 1B7E     		ldrb	r3, [r3, #24]
 194 00ee 9A03     		lsls	r2, r3, #14
 525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 195              		.loc 1 525 18
 196 00f0 7B68     		ldr	r3, [r7, #4]
 197 00f2 5B7E     		ldrb	r3, [r3, #25]
 198 00f4 DB03     		lsls	r3, r3, #15
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 199              		.loc 1 524 83
 200 00f6 1A43     		orrs	r2, r3
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 201              		.loc 1 526 18
 202 00f8 7B68     		ldr	r3, [r7, #4]
 203 00fa 9B7E     		ldrb	r3, [r3, #26]
 204 00fc 5B03     		lsls	r3, r3, #13
 525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 205              		.loc 1 525 83
 206 00fe 1A43     		orrs	r2, r3
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 207              		.loc 1 527 18
 208 0100 7B68     		ldr	r3, [r7, #4]
 209 0102 9B6A     		ldr	r3, [r3, #40]
 210 0104 012B     		cmp	r3, #1
 211 0106 02D0     		beq	.L10
 212              		.loc 1 527 18 is_stmt 0 discriminator 1
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 14


 213 0108 8023     		movs	r3, #128
 214 010a 5B01     		lsls	r3, r3, #5
 215 010c 00E0     		b	.L11
 216              	.L10:
 217              		.loc 1 527 18 discriminator 2
 218 010e 0023     		movs	r3, #0
 219              	.L11:
 526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 220              		.loc 1 526 83 is_stmt 1
 221 0110 1A43     		orrs	r2, r3
 528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                             |
 222              		.loc 1 528 28
 223 0112 7B68     		ldr	r3, [r7, #4]
 224 0114 DB68     		ldr	r3, [r3, #12]
 527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 225              		.loc 1 527 83
 226 0116 1A43     		orrs	r2, r3
 529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 227              		.loc 1 529 18
 228 0118 7B68     		ldr	r3, [r7, #4]
 229 011a 1B69     		ldr	r3, [r3, #16]
 230 011c 022B     		cmp	r3, #2
 231 011e 01D1     		bne	.L12
 232              		.loc 1 529 18 is_stmt 0 discriminator 1
 233 0120 0423     		movs	r3, #4
 234 0122 00E0     		b	.L13
 235              	.L12:
 236              		.loc 1 529 18 discriminator 2
 237 0124 0023     		movs	r3, #0
 238              	.L13:
 528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  hadc->Init.DataAlign                                             |
 239              		.loc 1 528 83 is_stmt 1
 240 0126 1A43     		orrs	r2, r3
 530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 241              		.loc 1 530 18
 242 0128 7B68     		ldr	r3, [r7, #4]
 243 012a 2421     		movs	r1, #36
 244 012c 5B5C     		ldrb	r3, [r3, r1]
 245 012e 5B00     		lsls	r3, r3, #1
 529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 246              		.loc 1 529 83
 247 0130 1343     		orrs	r3, r2
 524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                  ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 248              		.loc 1 524 14
 249 0132 BA68     		ldr	r2, [r7, #8]
 250 0134 1343     		orrs	r3, r2
 251 0136 BB60     		str	r3, [r7, #8]
 531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 252              		.loc 1 533 19
 253 0138 7B68     		ldr	r3, [r7, #4]
 254 013a DB7E     		ldrb	r3, [r3, #27]
 255              		.loc 1 533 8
 256 013c 012B     		cmp	r3, #1
 257 013e 15D1     		bne	.L14
 534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 15


 535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 258              		.loc 1 535 21
 259 0140 7B68     		ldr	r3, [r7, #4]
 260 0142 9B7E     		ldrb	r3, [r3, #26]
 261              		.loc 1 535 10
 262 0144 002B     		cmp	r3, #0
 263 0146 05D1     		bne	.L15
 536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Enable the selected ADC group regular discontinuous mode */
 538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         tmpCFGR1 |= ADC_CFGR1_DISCEN;
 264              		.loc 1 538 18
 265 0148 BB68     		ldr	r3, [r7, #8]
 266 014a 8022     		movs	r2, #128
 267 014c 5202     		lsls	r2, r2, #9
 268 014e 1343     		orrs	r3, r2
 269 0150 BB60     		str	r3, [r7, #8]
 270 0152 0BE0     		b	.L14
 271              	.L15:
 539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
 541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
 542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADC regular group discontinuous was intended to be enabled,        */
 543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* but ADC regular group modes continuous and sequencer discontinuous */
 544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                  */
 545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
 547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 272              		.loc 1 547 9
 273 0154 7B68     		ldr	r3, [r7, #4]
 274 0156 9B6B     		ldr	r3, [r3, #56]
 275 0158 2022     		movs	r2, #32
 276 015a 1A43     		orrs	r2, r3
 277 015c 7B68     		ldr	r3, [r7, #4]
 278 015e 9A63     		str	r2, [r3, #56]
 548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 279              		.loc 1 550 9
 280 0160 7B68     		ldr	r3, [r7, #4]
 281 0162 DB6B     		ldr	r3, [r3, #60]
 282 0164 0122     		movs	r2, #1
 283 0166 1A43     		orrs	r2, r3
 284 0168 7B68     		ldr	r3, [r7, #4]
 285 016a DA63     		str	r2, [r3, #60]
 286              	.L14:
 551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
 552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* start.                                                                 */
 556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       software start.                                                  */
 559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 287              		.loc 1 559 19
 288 016c 7B68     		ldr	r3, [r7, #4]
 289 016e DA69     		ldr	r2, [r3, #28]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 16


 290              		.loc 1 559 8
 291 0170 C223     		movs	r3, #194
 292 0172 FF33     		adds	r3, r3, #255
 293 0174 9A42     		cmp	r2, r3
 294 0176 07D0     		beq	.L16
 560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 295              		.loc 1 561 31
 296 0178 7B68     		ldr	r3, [r7, #4]
 297 017a DA69     		ldr	r2, [r3, #28]
 562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 298              		.loc 1 562 31
 299 017c 7B68     		ldr	r3, [r7, #4]
 300 017e 1B6A     		ldr	r3, [r3, #32]
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 301              		.loc 1 561 52
 302 0180 1343     		orrs	r3, r2
 561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                     hadc->Init.ExternalTrigConvEdge );
 303              		.loc 1 561 16
 304 0182 BA68     		ldr	r2, [r7, #8]
 305 0184 1343     		orrs	r3, r2
 306 0186 BB60     		str	r3, [r7, #8]
 307              	.L16:
 563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC configuration register with previous settings */
 566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= tmpCFGR1;
 308              		.loc 1 566 9
 309 0188 7B68     		ldr	r3, [r7, #4]
 310 018a 1B68     		ldr	r3, [r3]
 311              		.loc 1 566 27
 312 018c D968     		ldr	r1, [r3, #12]
 313              		.loc 1 566 9
 314 018e 7B68     		ldr	r3, [r7, #4]
 315 0190 1B68     		ldr	r3, [r3]
 316              		.loc 1 566 27
 317 0192 BA68     		ldr	r2, [r7, #8]
 318 0194 0A43     		orrs	r2, r1
 319 0196 DA60     		str	r2, [r3, #12]
 567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Channel sampling time configuration */
 569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
 570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (obsolete): sampling time set in this function if parameter            */
 571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
 572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Otherwise, sampling time is set into ADC channel initialization        */
 573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* structure with parameter "SamplingTime" (obsolete).                    */
 574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 320              		.loc 1 574 9
 321 0198 7B68     		ldr	r3, [r7, #4]
 322 019a DA6A     		ldr	r2, [r3, #44]
 323              		.loc 1 574 8
 324 019c 8023     		movs	r3, #128
 325 019e 5B05     		lsls	r3, r3, #21
 326 01a0 9A42     		cmp	r2, r3
 327 01a2 1BD0     		beq	.L17
 328              		.loc 1 574 9 discriminator 1
 329 01a4 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 17


 330 01a6 DB6A     		ldr	r3, [r3, #44]
 331 01a8 012B     		cmp	r3, #1
 332 01aa 17D0     		beq	.L17
 333              		.loc 1 574 9 is_stmt 0 discriminator 2
 334 01ac 7B68     		ldr	r3, [r7, #4]
 335 01ae DB6A     		ldr	r3, [r3, #44]
 336 01b0 022B     		cmp	r3, #2
 337 01b2 13D0     		beq	.L17
 338              		.loc 1 574 9 discriminator 3
 339 01b4 7B68     		ldr	r3, [r7, #4]
 340 01b6 DB6A     		ldr	r3, [r3, #44]
 341 01b8 032B     		cmp	r3, #3
 342 01ba 0FD0     		beq	.L17
 343              		.loc 1 574 9 discriminator 4
 344 01bc 7B68     		ldr	r3, [r7, #4]
 345 01be DB6A     		ldr	r3, [r3, #44]
 346 01c0 042B     		cmp	r3, #4
 347 01c2 0BD0     		beq	.L17
 348              		.loc 1 574 9 discriminator 5
 349 01c4 7B68     		ldr	r3, [r7, #4]
 350 01c6 DB6A     		ldr	r3, [r3, #44]
 351 01c8 052B     		cmp	r3, #5
 352 01ca 07D0     		beq	.L17
 353              		.loc 1 574 9 discriminator 6
 354 01cc 7B68     		ldr	r3, [r7, #4]
 355 01ce DB6A     		ldr	r3, [r3, #44]
 356 01d0 062B     		cmp	r3, #6
 357 01d2 03D0     		beq	.L17
 358              		.loc 1 574 9 discriminator 7
 359 01d4 7B68     		ldr	r3, [r7, #4]
 360 01d6 DB6A     		ldr	r3, [r3, #44]
 361 01d8 072B     		cmp	r3, #7
 362 01da 12D1     		bne	.L18
 363              	.L17:
 575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
 577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear the old sample time */
 578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 364              		.loc 1 578 11 is_stmt 1
 365 01dc 7B68     		ldr	r3, [r7, #4]
 366 01de 1B68     		ldr	r3, [r3]
 367              		.loc 1 578 28
 368 01e0 5A69     		ldr	r2, [r3, #20]
 369              		.loc 1 578 11
 370 01e2 7B68     		ldr	r3, [r7, #4]
 371 01e4 1B68     		ldr	r3, [r3]
 372              		.loc 1 578 28
 373 01e6 0721     		movs	r1, #7
 374 01e8 8A43     		bics	r2, r1
 375 01ea 5A61     		str	r2, [r3, #20]
 579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the new sample time */
 581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 376              		.loc 1 581 11
 377 01ec 7B68     		ldr	r3, [r7, #4]
 378 01ee 1B68     		ldr	r3, [r3]
 379              		.loc 1 581 28
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 18


 380 01f0 5969     		ldr	r1, [r3, #20]
 381              		.loc 1 581 31
 382 01f2 7B68     		ldr	r3, [r7, #4]
 383 01f4 DB6A     		ldr	r3, [r3, #44]
 384 01f6 0722     		movs	r2, #7
 385 01f8 1A40     		ands	r2, r3
 386              		.loc 1 581 11
 387 01fa 7B68     		ldr	r3, [r7, #4]
 388 01fc 1B68     		ldr	r3, [r3]
 389              		.loc 1 581 28
 390 01fe 0A43     		orrs	r2, r1
 391 0200 5A61     		str	r2, [r3, #20]
 392              	.L18:
 582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check through register CFGR1 (excluding analog watchdog configuration: */
 587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* set into separate dedicated function, and bits of ADC resolution set   */
 588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* out of temporary variable 'tmpCFGR1').                                 */
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1
 393              		.loc 1 589 14
 394 0202 7B68     		ldr	r3, [r7, #4]
 395 0204 1B68     		ldr	r3, [r3]
 396              		.loc 1 589 24
 397 0206 DB68     		ldr	r3, [r3, #12]
 398              		.loc 1 589 32
 399 0208 1C4A     		ldr	r2, .L22+8
 400 020a 1340     		ands	r3, r2
 401              		.loc 1 589 8
 402 020c BA68     		ldr	r2, [r7, #8]
 403 020e 9A42     		cmp	r2, r3
 404 0210 0BD1     		bne	.L19
 590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to none */
 593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 405              		.loc 1 593 7
 406 0212 7B68     		ldr	r3, [r7, #4]
 407 0214 0022     		movs	r2, #0
 408 0216 DA63     		str	r2, [r3, #60]
 594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the ADC state */
 596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 409              		.loc 1 596 7
 410 0218 7B68     		ldr	r3, [r7, #4]
 411 021a 9B6B     		ldr	r3, [r3, #56]
 412 021c 0322     		movs	r2, #3
 413 021e 9343     		bics	r3, r2
 414 0220 0122     		movs	r2, #1
 415 0222 1A43     		orrs	r2, r3
 416 0224 7B68     		ldr	r3, [r7, #4]
 417 0226 9A63     		str	r2, [r3, #56]
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 418              		.loc 1 589 8
 419 0228 1CE0     		b	.L21
 420              	.L19:
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 19


 597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
 601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
 603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 421              		.loc 1 603 7
 422 022a 7B68     		ldr	r3, [r7, #4]
 423 022c 9B6B     		ldr	r3, [r3, #56]
 424 022e 1222     		movs	r2, #18
 425 0230 9343     		bics	r3, r2
 426 0232 1022     		movs	r2, #16
 427 0234 1A43     		orrs	r2, r3
 428 0236 7B68     		ldr	r3, [r7, #4]
 429 0238 9A63     		str	r2, [r3, #56]
 604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 430              		.loc 1 608 7
 431 023a 7B68     		ldr	r3, [r7, #4]
 432 023c DB6B     		ldr	r3, [r3, #60]
 433 023e 0122     		movs	r2, #1
 434 0240 1A43     		orrs	r2, r3
 435 0242 7B68     		ldr	r3, [r7, #4]
 436 0244 DA63     		str	r2, [r3, #60]
 609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 437              		.loc 1 610 22
 438 0246 0F23     		movs	r3, #15
 439 0248 FB18     		adds	r3, r7, r3
 440 024a 0122     		movs	r2, #1
 441 024c 1A70     		strb	r2, [r3]
 589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****          == tmpCFGR1)
 442              		.loc 1 589 8
 443 024e 09E0     		b	.L21
 444              	.L5:
 611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
 617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 445              		.loc 1 617 5
 446 0250 7B68     		ldr	r3, [r7, #4]
 447 0252 9B6B     		ldr	r3, [r3, #56]
 448 0254 1022     		movs	r2, #16
 449 0256 1A43     		orrs	r2, r3
 450 0258 7B68     		ldr	r3, [r7, #4]
 451 025a 9A63     		str	r2, [r3, #56]
 618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 452              		.loc 1 619 20
 453 025c 0F23     		movs	r3, #15
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 20


 454 025e FB18     		adds	r3, r7, r3
 455 0260 0122     		movs	r2, #1
 456 0262 1A70     		strb	r2, [r3]
 457              	.L21:
 620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 458              		.loc 1 623 10
 459 0264 0F23     		movs	r3, #15
 460 0266 FB18     		adds	r3, r7, r3
 461 0268 1B78     		ldrb	r3, [r3]
 462              	.L3:
 624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 463              		.loc 1 624 1
 464 026a 1800     		movs	r0, r3
 465 026c BD46     		mov	sp, r7
 466 026e 04B0     		add	sp, sp, #16
 467              		@ sp needed
 468 0270 80BD     		pop	{r7, pc}
 469              	.L23:
 470 0272 C046     		.align	2
 471              	.L22:
 472 0274 FDFEFFFF 		.word	-259
 473 0278 1902FEFF 		.word	-130535
 474 027c E7FF3F83 		.word	-2092957721
 475              		.cfi_endproc
 476              	.LFE40:
 478              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 479              		.align	1
 480              		.global	HAL_ADC_DeInit
 481              		.syntax unified
 482              		.code	16
 483              		.thumb_func
 485              	HAL_ADC_DeInit:
 486              	.LFB41:
 625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done 
 631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is  
 633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same 
 635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         common group is still running.
 636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 487              		.loc 1 640 1
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 16
 490              		@ frame_needed = 1, uses_anonymous_args = 0
 491 0000 B0B5     		push	{r4, r5, r7, lr}
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 21


 492              	.LCFI3:
 493              		.cfi_def_cfa_offset 16
 494              		.cfi_offset 4, -16
 495              		.cfi_offset 5, -12
 496              		.cfi_offset 7, -8
 497              		.cfi_offset 14, -4
 498 0002 84B0     		sub	sp, sp, #16
 499              	.LCFI4:
 500              		.cfi_def_cfa_offset 32
 501 0004 00AF     		add	r7, sp, #0
 502              	.LCFI5:
 503              		.cfi_def_cfa_register 7
 504 0006 7860     		str	r0, [r7, #4]
 641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 505              		.loc 1 641 21
 506 0008 0F23     		movs	r3, #15
 507 000a FB18     		adds	r3, r7, r3
 508 000c 0022     		movs	r2, #0
 509 000e 1A70     		strb	r2, [r3]
 642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check ADC handle */
 644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(hadc == NULL)
 510              		.loc 1 644 5
 511 0010 7B68     		ldr	r3, [r7, #4]
 512 0012 002B     		cmp	r3, #0
 513 0014 01D1     		bne	.L25
 645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      return HAL_ERROR;
 514              		.loc 1 646 13
 515 0016 0123     		movs	r3, #1
 516 0018 6FE0     		b	.L26
 517              	.L25:
 647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
 650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
 653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 518              		.loc 1 653 3
 519 001a 7B68     		ldr	r3, [r7, #4]
 520 001c 9B6B     		ldr	r3, [r3, #56]
 521 001e 0222     		movs	r2, #2
 522 0020 1A43     		orrs	r2, r3
 523 0022 7B68     		ldr	r3, [r7, #4]
 524 0024 9A63     		str	r2, [r3, #56]
 654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
 656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 525              		.loc 1 656 20
 526 0026 0F25     		movs	r5, #15
 527 0028 7C19     		adds	r4, r7, r5
 528 002a 7B68     		ldr	r3, [r7, #4]
 529 002c 1800     		movs	r0, r3
 530 002e FFF7FEFF 		bl	ADC_ConversionStop
 531 0032 0300     		movs	r3, r0
 532 0034 2370     		strb	r3, [r4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 22


 657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 533              		.loc 1 659 6
 534 0036 7B19     		adds	r3, r7, r5
 535 0038 1B78     		ldrb	r3, [r3]
 536 003a 002B     		cmp	r3, #0
 537 003c 0DD1     		bne	.L27
 660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {   
 661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the ADC peripheral */
 662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 538              		.loc 1 662 22
 539 003e 7C19     		adds	r4, r7, r5
 540 0040 7B68     		ldr	r3, [r7, #4]
 541 0042 1800     		movs	r0, r3
 542 0044 FFF7FEFF 		bl	ADC_Disable
 543 0048 0300     		movs	r3, r0
 544 004a 2370     		strb	r3, [r4]
 663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status != HAL_ERROR)
 545              		.loc 1 665 8
 546 004c 7B19     		adds	r3, r7, r5
 547 004e 1B78     		ldrb	r3, [r3]
 548 0050 012B     		cmp	r3, #1
 549 0052 02D0     		beq	.L27
 666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Change ADC state */
 668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 550              		.loc 1 668 19
 551 0054 7B68     		ldr	r3, [r7, #4]
 552 0056 0122     		movs	r2, #1
 553 0058 9A63     		str	r2, [r3, #56]
 554              	.L27:
 669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* correctly completed.                                                     */
 675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status != HAL_ERROR)
 555              		.loc 1 675 6
 556 005a 0F23     		movs	r3, #15
 557 005c FB18     		adds	r3, r7, r3
 558 005e 1B78     		ldrb	r3, [r3]
 559 0060 012B     		cmp	r3, #1
 560 0062 43D0     		beq	.L28
 676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register IER */
 680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 561              		.loc 1 680 5
 562 0064 7B68     		ldr	r3, [r7, #4]
 563 0066 1B68     		ldr	r3, [r3]
 564 0068 5A68     		ldr	r2, [r3, #4]
 565 006a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 23


 566 006c 1B68     		ldr	r3, [r3]
 567 006e 9F21     		movs	r1, #159
 568 0070 8A43     		bics	r2, r1
 569 0072 5A60     		str	r2, [r3, #4]
 681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOS   | ADC_IT_EOC  |
 682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_IT_EOSMP | ADC_IT_RDY   ) );
 683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register ISR */
 685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD   | ADC_FLAG_OVR  |
 570              		.loc 1 685 5
 571 0074 7B68     		ldr	r3, [r7, #4]
 572 0076 1B68     		ldr	r3, [r3]
 573 0078 9F22     		movs	r2, #159
 574 007a 1A60     		str	r2, [r3]
 686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_FLAG_EOSMP | ADC_FLAG_RDY   ) );
 688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CR */
 690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
 691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* "read-set": no direct reset applicable.                                */
 692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR1 */
 694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_
 575              		.loc 1 694 9
 576 007c 7B68     		ldr	r3, [r7, #4]
 577 007e 1B68     		ldr	r3, [r3]
 578              		.loc 1 694 27
 579 0080 DA68     		ldr	r2, [r3, #12]
 580              		.loc 1 694 9
 581 0082 7B68     		ldr	r3, [r7, #4]
 582 0084 1B68     		ldr	r3, [r3]
 583              		.loc 1 694 27
 584 0086 1F49     		ldr	r1, .L29
 585 0088 0A40     		ands	r2, r1
 586 008a DA60     		str	r2, [r3, #12]
 695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_
 696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_
 697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN              
 698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CFGR2 */
 700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
 701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       already done above.                                              */
 702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 587              		.loc 1 702 9
 588 008c 7B68     		ldr	r3, [r7, #4]
 589 008e 1B68     		ldr	r3, [r3]
 590              		.loc 1 702 27
 591 0090 1A69     		ldr	r2, [r3, #16]
 592              		.loc 1 702 9
 593 0092 7B68     		ldr	r3, [r7, #4]
 594 0094 1B68     		ldr	r3, [r3]
 595              		.loc 1 702 27
 596 0096 9200     		lsls	r2, r2, #2
 597 0098 9208     		lsrs	r2, r2, #2
 598 009a 1A61     		str	r2, [r3, #16]
 703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register SMPR */
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 24


 705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 599              		.loc 1 705 9
 600 009c 7B68     		ldr	r3, [r7, #4]
 601 009e 1B68     		ldr	r3, [r3]
 602              		.loc 1 705 26
 603 00a0 5A69     		ldr	r2, [r3, #20]
 604              		.loc 1 705 9
 605 00a2 7B68     		ldr	r3, [r7, #4]
 606 00a4 1B68     		ldr	r3, [r3]
 607              		.loc 1 705 26
 608 00a6 0721     		movs	r1, #7
 609 00a8 8A43     		bics	r2, r1
 610 00aa 5A61     		str	r2, [r3, #20]
 706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register TR1 */
 708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 611              		.loc 1 708 9
 612 00ac 7B68     		ldr	r3, [r7, #4]
 613 00ae 1B68     		ldr	r3, [r3]
 614              		.loc 1 708 24
 615 00b0 1A6A     		ldr	r2, [r3, #32]
 616              		.loc 1 708 9
 617 00b2 7B68     		ldr	r3, [r7, #4]
 618 00b4 1B68     		ldr	r3, [r3]
 619              		.loc 1 708 24
 620 00b6 1449     		ldr	r1, .L29+4
 621 00b8 0A40     		ands	r2, r1
 622 00ba 1A62     		str	r2, [r3, #32]
 709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CHSELR */
 711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 623              		.loc 1 711 9
 624 00bc 7B68     		ldr	r3, [r7, #4]
 625 00be 1B68     		ldr	r3, [r3]
 626              		.loc 1 711 28
 627 00c0 9A6A     		ldr	r2, [r3, #40]
 628              		.loc 1 711 9
 629 00c2 7B68     		ldr	r3, [r7, #4]
 630 00c4 1B68     		ldr	r3, [r3]
 631              		.loc 1 711 28
 632 00c6 D20C     		lsrs	r2, r2, #19
 633 00c8 D204     		lsls	r2, r2, #19
 634 00ca 9A62     		str	r2, [r3, #40]
 712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL15 | ADC_CHSELR_CHSEL14 | ADC_CHSELR_CHSEL13 | ADC_
 713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL11 | ADC_CHSELR_CHSEL10 | ADC_CHSELR_CHSEL9  | ADC_
 714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL7  | ADC_CHSELR_CHSEL6  | ADC_CHSELR_CHSEL5  | ADC_
 715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CHSELR_CHSEL3  | ADC_CHSELR_CHSEL2  | ADC_CHSELR_CHSEL1  | ADC_
 716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register DR */
 718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Reset register CCR */
 721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC->CCR &= ~(ADC_CCR_ALL);
 635              		.loc 1 721 14
 636 00cc 0F4B     		ldr	r3, .L29+8
 637 00ce 1A68     		ldr	r2, [r3]
 638 00d0 0E4B     		ldr	r3, .L29+8
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 25


 639 00d2 0F49     		ldr	r1, .L29+12
 640 00d4 0A40     		ands	r2, r1
 641 00d6 1A60     		str	r2, [r3]
 722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*                                                                        */
 729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
 730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
 731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->MspDeInitCallback == NULL)
 734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* DeInit the low level hardware */
 739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->MspDeInitCallback(hadc);
 740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #else
 741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* DeInit the low level hardware */
 742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 642              		.loc 1 742 5
 643 00d8 7B68     		ldr	r3, [r7, #4]
 644 00da 1800     		movs	r0, r3
 645 00dc FFF7FEFF 		bl	HAL_ADC_MspDeInit
 743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC error code to none */
 746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 646              		.loc 1 746 5
 647 00e0 7B68     		ldr	r3, [r7, #4]
 648 00e2 0022     		movs	r2, #0
 649 00e4 DA63     		str	r2, [r3, #60]
 747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
 749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 650              		.loc 1 749 17
 651 00e6 7B68     		ldr	r3, [r7, #4]
 652 00e8 0022     		movs	r2, #0
 653 00ea 9A63     		str	r2, [r3, #56]
 654              	.L28:
 750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
 753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 655              		.loc 1 753 3
 656 00ec 7B68     		ldr	r3, [r7, #4]
 657 00ee 3422     		movs	r2, #52
 658 00f0 0021     		movs	r1, #0
 659 00f2 9954     		strb	r1, [r3, r2]
 754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
 756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 660              		.loc 1 756 10
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 26


 661 00f4 0F23     		movs	r3, #15
 662 00f6 FB18     		adds	r3, r7, r3
 663 00f8 1B78     		ldrb	r3, [r3]
 664              	.L26:
 757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 665              		.loc 1 757 1
 666 00fa 1800     		movs	r0, r3
 667 00fc BD46     		mov	sp, r7
 668 00fe 04B0     		add	sp, sp, #16
 669              		@ sp needed
 670 0100 B0BD     		pop	{r4, r5, r7, pc}
 671              	.L30:
 672 0102 C046     		.align	2
 673              	.L29:
 674 0104 00023E83 		.word	-2093088256
 675 0108 00F000F0 		.word	-268374016
 676 010c 08270140 		.word	1073817352
 677 0110 FFFF3FFE 		.word	-29360129
 678              		.cfi_endproc
 679              	.LFE41:
 681              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 682              		.align	1
 683              		.weak	HAL_ADC_MspInit
 684              		.syntax unified
 685              		.code	16
 686              		.thumb_func
 688              	HAL_ADC_MspInit:
 689              	.LFB42:
 758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 690              		.loc 1 766 1
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 8
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694 0000 80B5     		push	{r7, lr}
 695              	.LCFI6:
 696              		.cfi_def_cfa_offset 8
 697              		.cfi_offset 7, -8
 698              		.cfi_offset 14, -4
 699 0002 82B0     		sub	sp, sp, #8
 700              	.LCFI7:
 701              		.cfi_def_cfa_offset 16
 702 0004 00AF     		add	r7, sp, #0
 703              	.LCFI8:
 704              		.cfi_def_cfa_register 7
 705 0006 7860     		str	r0, [r7, #4]
 767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 27


 771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 706              		.loc 1 773 1
 707 0008 C046     		nop
 708 000a BD46     		mov	sp, r7
 709 000c 02B0     		add	sp, sp, #8
 710              		@ sp needed
 711 000e 80BD     		pop	{r7, pc}
 712              		.cfi_endproc
 713              	.LFE42:
 715              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 716              		.align	1
 717              		.weak	HAL_ADC_MspDeInit
 718              		.syntax unified
 719              		.code	16
 720              		.thumb_func
 722              	HAL_ADC_MspDeInit:
 723              	.LFB43:
 774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
 778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
 779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 724              		.loc 1 781 1
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 8
 727              		@ frame_needed = 1, uses_anonymous_args = 0
 728 0000 80B5     		push	{r7, lr}
 729              	.LCFI9:
 730              		.cfi_def_cfa_offset 8
 731              		.cfi_offset 7, -8
 732              		.cfi_offset 14, -4
 733 0002 82B0     		sub	sp, sp, #8
 734              	.LCFI10:
 735              		.cfi_def_cfa_offset 16
 736 0004 00AF     		add	r7, sp, #0
 737              	.LCFI11:
 738              		.cfi_def_cfa_register 7
 739 0006 7860     		str	r0, [r7, #4]
 782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
 784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */ 
 788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 740              		.loc 1 788 1
 741 0008 C046     		nop
 742 000a BD46     		mov	sp, r7
 743 000c 02B0     		add	sp, sp, #8
 744              		@ sp needed
 745 000e 80BD     		pop	{r7, pc}
 746              		.cfi_endproc
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 28


 747              	.LFE43:
 749              		.section	.text.HAL_ADC_Start,"ax",%progbits
 750              		.align	1
 751              		.global	HAL_ADC_Start
 752              		.syntax unified
 753              		.code	16
 754              		.thumb_func
 756              	HAL_ADC_Start:
 757              	.LFB44:
 789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This parameter can be one of the following values:
 798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (pCallback == NULL)
 815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update the error code */
 817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     return HAL_ERROR;
 820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     switch (CallbackID)
 825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 29


 837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       default :
 851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update the error code */
 852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Return error status */
 855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         status = HAL_ERROR;
 856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     switch (CallbackID)
 862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       default :
 872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update the error code */
 873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Return error status */
 876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         status = HAL_ERROR;
 877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update the error code */
 883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Return error status */
 886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     status =  HAL_ERROR;
 887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return status;
 890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 30


 894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
 895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
 898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This parameter can be one of the following values:
 899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
 909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
 911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     switch (CallbackID)
 917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
 920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
 924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
 928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
 932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
 936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
 940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       default :
 943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update the error code */
 944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Return error status */
 947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         status =  HAL_ERROR;
 948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 31


 951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     switch (CallbackID)
 954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
 957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
 961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       default :
 964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update the error code */
 965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
 967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Return error status */
 968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         status =  HAL_ERROR;
 969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         break;
 970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
 973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update the error code */
 975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Return error status */
 978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     status =  HAL_ERROR;
 979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
 981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return status;
 982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
 987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
 988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
 989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
 990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    IO operation functions 
 992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
 993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
 994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
 995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                       ##### IO operation functions #####
 996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
 997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group.
 999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group.
1000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Poll for conversion event.
1002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Handle ADC interrupt request
1006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 32


1008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
1014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
1015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
1019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 758              		.loc 1 1019 1
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 16
 761              		@ frame_needed = 1, uses_anonymous_args = 0
 762 0000 90B5     		push	{r4, r7, lr}
 763              	.LCFI12:
 764              		.cfi_def_cfa_offset 12
 765              		.cfi_offset 4, -12
 766              		.cfi_offset 7, -8
 767              		.cfi_offset 14, -4
 768 0002 85B0     		sub	sp, sp, #20
 769              	.LCFI13:
 770              		.cfi_def_cfa_offset 32
 771 0004 00AF     		add	r7, sp, #0
 772              	.LCFI14:
 773              		.cfi_def_cfa_register 7
 774 0006 7860     		str	r0, [r7, #4]
1020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 775              		.loc 1 1020 21
 776 0008 0F23     		movs	r3, #15
 777 000a FB18     		adds	r3, r7, r3
 778 000c 0022     		movs	r2, #0
 779 000e 1A70     		strb	r2, [r3]
1021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 780              		.loc 1 1026 7
 781 0010 7B68     		ldr	r3, [r7, #4]
 782 0012 1B68     		ldr	r3, [r3]
 783 0014 9B68     		ldr	r3, [r3, #8]
 784 0016 0422     		movs	r2, #4
 785 0018 1340     		ands	r3, r2
 786              		.loc 1 1026 6
 787 001a 38D1     		bne	.L34
1027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 788              		.loc 1 1029 5
 789 001c 7B68     		ldr	r3, [r7, #4]
 790 001e 3422     		movs	r2, #52
 791 0020 9B5C     		ldrb	r3, [r3, r2]
 792 0022 012B     		cmp	r3, #1
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 33


 793 0024 01D1     		bne	.L35
 794              		.loc 1 1029 5 is_stmt 0 discriminator 1
 795 0026 0223     		movs	r3, #2
 796 0028 38E0     		b	.L36
 797              	.L35:
 798              		.loc 1 1029 5 discriminator 2
 799 002a 7B68     		ldr	r3, [r7, #4]
 800 002c 3422     		movs	r2, #52
 801 002e 0121     		movs	r1, #1
 802 0030 9954     		strb	r1, [r3, r2]
1030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 803              		.loc 1 1034 19 is_stmt 1 discriminator 2
 804 0032 7B68     		ldr	r3, [r7, #4]
 805 0034 5B7E     		ldrb	r3, [r3, #25]
 806              		.loc 1 1034 8 discriminator 2
 807 0036 012B     		cmp	r3, #1
 808 0038 07D0     		beq	.L37
1035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 809              		.loc 1 1036 24
 810 003a 0F23     		movs	r3, #15
 811 003c FC18     		adds	r4, r7, r3
 812 003e 7B68     		ldr	r3, [r7, #4]
 813 0040 1800     		movs	r0, r3
 814 0042 FFF7FEFF 		bl	ADC_Enable
 815 0046 0300     		movs	r3, r0
 816 0048 2370     		strb	r3, [r4]
 817              	.L37:
1037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 818              		.loc 1 1040 8
 819 004a 0F23     		movs	r3, #15
 820 004c FB18     		adds	r3, r7, r3
 821 004e 1B78     		ldrb	r3, [r3]
 822 0050 002B     		cmp	r3, #0
 823 0052 20D1     		bne	.L38
1041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
1043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 824              		.loc 1 1045 7
 825 0054 7B68     		ldr	r3, [r7, #4]
 826 0056 9B6B     		ldr	r3, [r3, #56]
 827 0058 124A     		ldr	r2, .L39
 828 005a 1340     		ands	r3, r2
 829 005c 8022     		movs	r2, #128
 830 005e 5200     		lsls	r2, r2, #1
 831 0060 1A43     		orrs	r2, r3
 832 0062 7B68     		ldr	r3, [r7, #4]
 833 0064 9A63     		str	r2, [r3, #56]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 34


1046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 834              		.loc 1 1050 7
 835 0066 7B68     		ldr	r3, [r7, #4]
 836 0068 0022     		movs	r2, #0
 837 006a DA63     		str	r2, [r3, #60]
1051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 838              		.loc 1 1055 7
 839 006c 7B68     		ldr	r3, [r7, #4]
 840 006e 3422     		movs	r2, #52
 841 0070 0021     		movs	r1, #0
 842 0072 9954     		strb	r1, [r3, r2]
1056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 843              		.loc 1 1060 7
 844 0074 7B68     		ldr	r3, [r7, #4]
 845 0076 1B68     		ldr	r3, [r3]
 846 0078 1C22     		movs	r2, #28
 847 007a 1A60     		str	r2, [r3]
1061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 848              		.loc 1 1066 11
 849 007c 7B68     		ldr	r3, [r7, #4]
 850 007e 1B68     		ldr	r3, [r3]
 851              		.loc 1 1066 26
 852 0080 9A68     		ldr	r2, [r3, #8]
 853              		.loc 1 1066 11
 854 0082 7B68     		ldr	r3, [r7, #4]
 855 0084 1B68     		ldr	r3, [r3]
 856              		.loc 1 1066 26
 857 0086 0421     		movs	r1, #4
 858 0088 0A43     		orrs	r2, r1
 859 008a 9A60     		str	r2, [r3, #8]
 860 008c 03E0     		b	.L38
 861              	.L34:
1067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 862              		.loc 1 1071 20
 863 008e 0F23     		movs	r3, #15
 864 0090 FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 35


 865 0092 0222     		movs	r2, #2
 866 0094 1A70     		strb	r2, [r3]
 867              	.L38:
1072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 868              		.loc 1 1075 10
 869 0096 0F23     		movs	r3, #15
 870 0098 FB18     		adds	r3, r7, r3
 871 009a 1B78     		ldrb	r3, [r3]
 872              	.L36:
1076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 873              		.loc 1 1076 1
 874 009c 1800     		movs	r0, r3
 875 009e BD46     		mov	sp, r7
 876 00a0 05B0     		add	sp, sp, #20
 877              		@ sp needed
 878 00a2 90BD     		pop	{r4, r7, pc}
 879              	.L40:
 880              		.align	2
 881              	.L39:
 882 00a4 FEF0FFFF 		.word	-3842
 883              		.cfi_endproc
 884              	.LFE44:
 886              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 887              		.align	1
 888              		.global	HAL_ADC_Stop
 889              		.syntax unified
 890              		.code	16
 891              		.thumb_func
 893              	HAL_ADC_Stop:
 894              	.LFB45:
1077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
1080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
1084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** { 
 895              		.loc 1 1084 1
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 16
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899 0000 B0B5     		push	{r4, r5, r7, lr}
 900              	.LCFI15:
 901              		.cfi_def_cfa_offset 16
 902              		.cfi_offset 4, -16
 903              		.cfi_offset 5, -12
 904              		.cfi_offset 7, -8
 905              		.cfi_offset 14, -4
 906 0002 84B0     		sub	sp, sp, #16
 907              	.LCFI16:
 908              		.cfi_def_cfa_offset 32
 909 0004 00AF     		add	r7, sp, #0
 910              	.LCFI17:
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 36


 911              		.cfi_def_cfa_register 7
 912 0006 7860     		str	r0, [r7, #4]
1085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 913              		.loc 1 1085 21
 914 0008 0F23     		movs	r3, #15
 915 000a FB18     		adds	r3, r7, r3
 916 000c 0022     		movs	r2, #0
 917 000e 1A70     		strb	r2, [r3]
1086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 918              		.loc 1 1091 3
 919 0010 7B68     		ldr	r3, [r7, #4]
 920 0012 3422     		movs	r2, #52
 921 0014 9B5C     		ldrb	r3, [r3, r2]
 922 0016 012B     		cmp	r3, #1
 923 0018 01D1     		bne	.L42
 924              		.loc 1 1091 3 is_stmt 0 discriminator 1
 925 001a 0223     		movs	r3, #2
 926 001c 29E0     		b	.L43
 927              	.L42:
 928              		.loc 1 1091 3 discriminator 2
 929 001e 7B68     		ldr	r3, [r7, #4]
 930 0020 3422     		movs	r2, #52
 931 0022 0121     		movs	r1, #1
 932 0024 9954     		strb	r1, [r3, r2]
1092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 933              		.loc 1 1094 20 is_stmt 1 discriminator 2
 934 0026 0F25     		movs	r5, #15
 935 0028 7C19     		adds	r4, r7, r5
 936 002a 7B68     		ldr	r3, [r7, #4]
 937 002c 1800     		movs	r0, r3
 938 002e FFF7FEFF 		bl	ADC_ConversionStop
 939 0032 0300     		movs	r3, r0
 940 0034 2370     		strb	r3, [r4]
1095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 941              		.loc 1 1097 6 discriminator 2
 942 0036 7B19     		adds	r3, r7, r5
 943 0038 1B78     		ldrb	r3, [r3]
 944 003a 002B     		cmp	r3, #0
 945 003c 12D1     		bne	.L44
1098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 946              		.loc 1 1100 22
 947 003e 7C19     		adds	r4, r7, r5
 948 0040 7B68     		ldr	r3, [r7, #4]
 949 0042 1800     		movs	r0, r3
 950 0044 FFF7FEFF 		bl	ADC_Disable
 951 0048 0300     		movs	r3, r0
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 37


 952 004a 2370     		strb	r3, [r4]
1101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 953              		.loc 1 1103 8
 954 004c 7B19     		adds	r3, r7, r5
 955 004e 1B78     		ldrb	r3, [r3]
 956 0050 002B     		cmp	r3, #0
 957 0052 07D1     		bne	.L44
1104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 958              		.loc 1 1106 7
 959 0054 7B68     		ldr	r3, [r7, #4]
 960 0056 9B6B     		ldr	r3, [r3, #56]
 961 0058 084A     		ldr	r2, .L45
 962 005a 1340     		ands	r3, r2
 963 005c 0122     		movs	r2, #1
 964 005e 1A43     		orrs	r2, r3
 965 0060 7B68     		ldr	r3, [r7, #4]
 966 0062 9A63     		str	r2, [r3, #56]
 967              	.L44:
1107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 968              		.loc 1 1113 3
 969 0064 7B68     		ldr	r3, [r7, #4]
 970 0066 3422     		movs	r2, #52
 971 0068 0021     		movs	r1, #0
 972 006a 9954     		strb	r1, [r3, r2]
1114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 973              		.loc 1 1116 10
 974 006c 0F23     		movs	r3, #15
 975 006e FB18     		adds	r3, r7, r3
 976 0070 1B78     		ldrb	r3, [r3]
 977              	.L43:
1117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 978              		.loc 1 1117 1
 979 0072 1800     		movs	r0, r3
 980 0074 BD46     		mov	sp, r7
 981 0076 04B0     		add	sp, sp, #16
 982              		@ sp needed
 983 0078 B0BD     		pop	{r4, r5, r7, pc}
 984              	.L46:
 985 007a C046     		.align	2
 986              	.L45:
 987 007c FEFEFFFF 		.word	-258
 988              		.cfi_endproc
 989              	.LFE45:
 991              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 992              		.align	1
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 38


 993              		.global	HAL_ADC_PollForConversion
 994              		.syntax unified
 995              		.code	16
 996              		.thumb_func
 998              	HAL_ADC_PollForConversion:
 999              	.LFB46:
1118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are 
1124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
1127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
1131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
1135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
1138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1000              		.loc 1 1138 1
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 16
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004 0000 80B5     		push	{r7, lr}
 1005              	.LCFI18:
 1006              		.cfi_def_cfa_offset 8
 1007              		.cfi_offset 7, -8
 1008              		.cfi_offset 14, -4
 1009 0002 84B0     		sub	sp, sp, #16
 1010              	.LCFI19:
 1011              		.cfi_def_cfa_offset 24
 1012 0004 00AF     		add	r7, sp, #0
 1013              	.LCFI20:
 1014              		.cfi_def_cfa_register 7
 1015 0006 7860     		str	r0, [r7, #4]
 1016 0008 3960     		str	r1, [r7]
1139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart;
1140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmp_Flag_EOC;
1141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  
1142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of sequence */
1146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 1017              		.loc 1 1146 17
 1018 000a 7B68     		ldr	r3, [r7, #4]
 1019 000c 5B69     		ldr	r3, [r3, #20]
 1020              		.loc 1 1146 6
 1021 000e 082B     		cmp	r3, #8
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 39


 1022 0010 02D1     		bne	.L48
1147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_Flag_EOC = ADC_FLAG_EOS;
 1023              		.loc 1 1148 18
 1024 0012 0823     		movs	r3, #8
 1025 0014 FB60     		str	r3, [r7, #12]
 1026 0016 14E0     		b	.L49
 1027              	.L48:
1149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If end of conversion selected to end of each conversion */
1151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
1152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
1154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* each conversion:                                                       */
1155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
1157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
1158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
1159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 1028              		.loc 1 1159 9
 1029 0018 7B68     		ldr	r3, [r7, #4]
 1030 001a 1B68     		ldr	r3, [r3]
 1031 001c DB68     		ldr	r3, [r3, #12]
 1032 001e 0122     		movs	r2, #1
 1033 0020 1340     		ands	r3, r2
 1034              		.loc 1 1159 8
 1035 0022 012B     		cmp	r3, #1
 1036 0024 0BD1     		bne	.L50
1160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
1162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1037              		.loc 1 1162 7
 1038 0026 7B68     		ldr	r3, [r7, #4]
 1039 0028 9B6B     		ldr	r3, [r3, #56]
 1040 002a 2022     		movs	r2, #32
 1041 002c 1A43     		orrs	r2, r3
 1042 002e 7B68     		ldr	r3, [r7, #4]
 1043 0030 9A63     		str	r2, [r3, #56]
1163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1044              		.loc 1 1165 7
 1045 0032 7B68     		ldr	r3, [r7, #4]
 1046 0034 3422     		movs	r2, #52
 1047 0036 0021     		movs	r1, #0
 1048 0038 9954     		strb	r1, [r3, r2]
1166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
 1049              		.loc 1 1167 14
 1050 003a 0123     		movs	r3, #1
 1051 003c 71E0     		b	.L51
 1052              	.L50:
1168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 1053              		.loc 1 1171 20
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 40


 1054 003e 0C23     		movs	r3, #12
 1055 0040 FB60     		str	r3, [r7, #12]
 1056              	.L49:
1172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
1176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1057              		.loc 1 1176 15
 1058 0042 FFF7FEFF 		bl	HAL_GetTick
 1059 0046 0300     		movs	r3, r0
 1060 0048 BB60     		str	r3, [r7, #8]
1177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Wait until End of Conversion flag is raised */
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 1061              		.loc 1 1179 8
 1062 004a 1FE0     		b	.L52
 1063              	.L54:
1180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1064              		.loc 1 1182 7
 1065 004c 3B68     		ldr	r3, [r7]
 1066 004e 0133     		adds	r3, r3, #1
 1067 0050 1CD0     		beq	.L52
1183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 1068              		.loc 1 1184 9
 1069 0052 3B68     		ldr	r3, [r7]
 1070 0054 002B     		cmp	r3, #0
 1071 0056 07D0     		beq	.L53
 1072              		.loc 1 1184 30 discriminator 1
 1073 0058 FFF7FEFF 		bl	HAL_GetTick
 1074 005c 0200     		movs	r2, r0
 1075              		.loc 1 1184 43 discriminator 1
 1076 005e BB68     		ldr	r3, [r7, #8]
 1077 0060 D31A     		subs	r3, r2, r3
 1078              		.loc 1 1184 25 discriminator 1
 1079 0062 3A68     		ldr	r2, [r7]
 1080 0064 9A42     		cmp	r2, r3
 1081 0066 11D2     		bcs	.L52
 1082              	.L53:
1185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 1083              		.loc 1 1187 12
 1084 0068 7B68     		ldr	r3, [r7, #4]
 1085 006a 1B68     		ldr	r3, [r3]
 1086 006c 1B68     		ldr	r3, [r3]
 1087 006e FA68     		ldr	r2, [r7, #12]
 1088 0070 1340     		ands	r3, r2
 1089              		.loc 1 1187 11
 1090 0072 0BD1     		bne	.L52
1188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1091              		.loc 1 1190 11
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 41


 1092 0074 7B68     		ldr	r3, [r7, #4]
 1093 0076 9B6B     		ldr	r3, [r3, #56]
 1094 0078 0422     		movs	r2, #4
 1095 007a 1A43     		orrs	r2, r3
 1096 007c 7B68     		ldr	r3, [r7, #4]
 1097 007e 9A63     		str	r2, [r3, #56]
1191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Process unlocked */
1193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1098              		.loc 1 1193 11
 1099 0080 7B68     		ldr	r3, [r7, #4]
 1100 0082 3422     		movs	r2, #52
 1101 0084 0021     		movs	r1, #0
 1102 0086 9954     		strb	r1, [r3, r2]
1194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           return HAL_TIMEOUT;
 1103              		.loc 1 1195 18
 1104 0088 0323     		movs	r3, #3
 1105 008a 4AE0     		b	.L51
 1106              	.L52:
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1107              		.loc 1 1179 9
 1108 008c 7B68     		ldr	r3, [r7, #4]
 1109 008e 1B68     		ldr	r3, [r3]
 1110 0090 1B68     		ldr	r3, [r3]
 1111 0092 FA68     		ldr	r2, [r7, #12]
 1112 0094 1340     		ands	r3, r2
1179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1113              		.loc 1 1179 8
 1114 0096 D9D0     		beq	.L54
1196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update ADC state machine */
1202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1115              		.loc 1 1202 3
 1116 0098 7B68     		ldr	r3, [r7, #4]
 1117 009a 9B6B     		ldr	r3, [r3, #56]
 1118 009c 8022     		movs	r2, #128
 1119 009e 9200     		lsls	r2, r2, #2
 1120 00a0 1A43     		orrs	r2, r3
 1121 00a2 7B68     		ldr	r3, [r7, #4]
 1122 00a4 9A63     		str	r2, [r3, #56]
1203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1123              		.loc 1 1206 6
 1124 00a6 7B68     		ldr	r3, [r7, #4]
 1125 00a8 1B68     		ldr	r3, [r3]
 1126 00aa DA68     		ldr	r2, [r3, #12]
 1127 00ac C023     		movs	r3, #192
 1128 00ae 1B01     		lsls	r3, r3, #4
 1129 00b0 1340     		ands	r3, r2
 1130              		.loc 1 1206 5
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 42


 1131 00b2 2DD1     		bne	.L55
1207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1132              		.loc 1 1207 17 discriminator 1
 1133 00b4 7B68     		ldr	r3, [r7, #4]
 1134 00b6 9B7E     		ldrb	r3, [r3, #26]
1206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1135              		.loc 1 1206 49 discriminator 1
 1136 00b8 002B     		cmp	r3, #0
 1137 00ba 29D1     		bne	.L55
1208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If End of Sequence is reached, disable interrupts */
1210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 1138              		.loc 1 1210 9
 1139 00bc 7B68     		ldr	r3, [r7, #4]
 1140 00be 1B68     		ldr	r3, [r3]
 1141 00c0 1B68     		ldr	r3, [r3]
 1142 00c2 0822     		movs	r2, #8
 1143 00c4 1340     		ands	r3, r2
 1144              		.loc 1 1210 7
 1145 00c6 082B     		cmp	r3, #8
 1146 00c8 22D1     		bne	.L55
1211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
1213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
1214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1147              		.loc 1 1214 11
 1148 00ca 7B68     		ldr	r3, [r7, #4]
 1149 00cc 1B68     		ldr	r3, [r3]
 1150 00ce 9B68     		ldr	r3, [r3, #8]
 1151 00d0 0422     		movs	r2, #4
 1152 00d2 1340     		ands	r3, r2
 1153              		.loc 1 1214 10
 1154 00d4 10D1     		bne	.L56
1215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
1217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
1219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
1220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 1155              		.loc 1 1220 9
 1156 00d6 7B68     		ldr	r3, [r7, #4]
 1157 00d8 1B68     		ldr	r3, [r3]
 1158 00da 5A68     		ldr	r2, [r3, #4]
 1159 00dc 7B68     		ldr	r3, [r7, #4]
 1160 00de 1B68     		ldr	r3, [r3]
 1161 00e0 0C21     		movs	r1, #12
 1162 00e2 8A43     		bics	r2, r1
 1163 00e4 5A60     		str	r2, [r3, #4]
1221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC state */
1223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 1164              		.loc 1 1223 9
 1165 00e6 7B68     		ldr	r3, [r7, #4]
 1166 00e8 9B6B     		ldr	r3, [r3, #56]
 1167 00ea 104A     		ldr	r2, .L58
 1168 00ec 1340     		ands	r3, r2
 1169 00ee 0122     		movs	r2, #1
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 43


 1170 00f0 1A43     		orrs	r2, r3
 1171 00f2 7B68     		ldr	r3, [r7, #4]
 1172 00f4 9A63     		str	r2, [r3, #56]
 1173 00f6 0BE0     		b	.L55
 1174              	.L56:
1224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
1225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
1226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       else
1228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Change ADC state to error state */
1230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1175              		.loc 1 1230 9
 1176 00f8 7B68     		ldr	r3, [r7, #4]
 1177 00fa 9B6B     		ldr	r3, [r3, #56]
 1178 00fc 2022     		movs	r2, #32
 1179 00fe 1A43     		orrs	r2, r3
 1180 0100 7B68     		ldr	r3, [r7, #4]
 1181 0102 9A63     		str	r2, [r3, #56]
1231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
1233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 1182              		.loc 1 1233 9
 1183 0104 7B68     		ldr	r3, [r7, #4]
 1184 0106 DB6B     		ldr	r3, [r3, #60]
 1185 0108 0122     		movs	r2, #1
 1186 010a 1A43     		orrs	r2, r3
 1187 010c 7B68     		ldr	r3, [r7, #4]
 1188 010e DA63     		str	r2, [r3, #60]
 1189              	.L55:
1234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
1239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
1240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
1241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 1190              		.loc 1 1241 17
 1191 0110 7B68     		ldr	r3, [r7, #4]
 1192 0112 1B7E     		ldrb	r3, [r3, #24]
 1193              		.loc 1 1241 6
 1194 0114 002B     		cmp	r3, #0
 1195 0116 03D1     		bne	.L57
1242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 1196              		.loc 1 1244 5
 1197 0118 7B68     		ldr	r3, [r7, #4]
 1198 011a 1B68     		ldr	r3, [r3]
 1199 011c 0C22     		movs	r2, #12
 1200 011e 1A60     		str	r2, [r3]
 1201              	.L57:
1245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 44


 1202              		.loc 1 1248 10
 1203 0120 0023     		movs	r3, #0
 1204              	.L51:
1249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1205              		.loc 1 1249 1
 1206 0122 1800     		movs	r0, r3
 1207 0124 BD46     		mov	sp, r7
 1208 0126 04B0     		add	sp, sp, #16
 1209              		@ sp needed
 1210 0128 80BD     		pop	{r7, pc}
 1211              	.L59:
 1212 012a C046     		.align	2
 1213              	.L58:
 1214 012c FEFEFFFF 		.word	-258
 1215              		.cfi_endproc
 1216              	.LFE46:
 1218              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1219              		.align	1
 1220              		.global	HAL_ADC_PollForEvent
 1221              		.syntax unified
 1222              		.code	16
 1223              		.thumb_func
 1225              	HAL_ADC_PollForEvent:
 1226              	.LFB47:
1250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Poll for conversion event.
1253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  EventType the ADC event type.
1255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          This parameter can be one of the following values:
1256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event
1257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event
1258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.
1259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1227              		.loc 1 1262 1
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 24
 1230              		@ frame_needed = 1, uses_anonymous_args = 0
 1231 0000 80B5     		push	{r7, lr}
 1232              	.LCFI21:
 1233              		.cfi_def_cfa_offset 8
 1234              		.cfi_offset 7, -8
 1235              		.cfi_offset 14, -4
 1236 0002 86B0     		sub	sp, sp, #24
 1237              	.LCFI22:
 1238              		.cfi_def_cfa_offset 32
 1239 0004 00AF     		add	r7, sp, #0
 1240              	.LCFI23:
 1241              		.cfi_def_cfa_register 7
 1242 0006 F860     		str	r0, [r7, #12]
 1243 0008 B960     		str	r1, [r7, #8]
 1244 000a 7A60     		str	r2, [r7, #4]
1263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart=0; 
 1245              		.loc 1 1263 12
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 45


 1246 000c 0023     		movs	r3, #0
 1247 000e 7B61     		str	r3, [r7, #20]
1264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Get tick count */
1270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tickstart = HAL_GetTick();   
 1248              		.loc 1 1270 15
 1249 0010 FFF7FEFF 		bl	HAL_GetTick
 1250 0014 0300     		movs	r3, r0
 1251 0016 7B61     		str	r3, [r7, #20]
1271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check selected event flag */
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1252              		.loc 1 1273 8
 1253 0018 21E0     		b	.L61
 1254              	.L64:
1274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1255              		.loc 1 1276 7
 1256 001a 7B68     		ldr	r3, [r7, #4]
 1257 001c 0133     		adds	r3, r3, #1
 1258 001e 1ED0     		beq	.L61
1277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 1259              		.loc 1 1278 9
 1260 0020 7B68     		ldr	r3, [r7, #4]
 1261 0022 002B     		cmp	r3, #0
 1262 0024 07D0     		beq	.L62
 1263              		.loc 1 1278 31 discriminator 1
 1264 0026 FFF7FEFF 		bl	HAL_GetTick
 1265 002a 0200     		movs	r2, r0
 1266              		.loc 1 1278 44 discriminator 1
 1267 002c 7B69     		ldr	r3, [r7, #20]
 1268 002e D31A     		subs	r3, r2, r3
 1269              		.loc 1 1278 26 discriminator 1
 1270 0030 7A68     		ldr	r2, [r7, #4]
 1271 0032 9A42     		cmp	r2, r3
 1272 0034 13D2     		bcs	.L61
 1273              	.L62:
1279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1274              		.loc 1 1281 12
 1275 0036 FB68     		ldr	r3, [r7, #12]
 1276 0038 1B68     		ldr	r3, [r3]
 1277 003a 1B68     		ldr	r3, [r3]
 1278 003c BA68     		ldr	r2, [r7, #8]
 1279 003e 1340     		ands	r3, r2
 1280              		.loc 1 1281 11
 1281 0040 BA68     		ldr	r2, [r7, #8]
 1282 0042 9A42     		cmp	r2, r3
 1283 0044 0BD0     		beq	.L61
1282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 46


1283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1284              		.loc 1 1284 11
 1285 0046 FB68     		ldr	r3, [r7, #12]
 1286 0048 9B6B     		ldr	r3, [r3, #56]
 1287 004a 0422     		movs	r2, #4
 1288 004c 1A43     		orrs	r2, r3
 1289 004e FB68     		ldr	r3, [r7, #12]
 1290 0050 9A63     		str	r2, [r3, #56]
1285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Process unlocked */
1287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1291              		.loc 1 1287 11
 1292 0052 FB68     		ldr	r3, [r7, #12]
 1293 0054 3422     		movs	r2, #52
 1294 0056 0021     		movs	r1, #0
 1295 0058 9954     		strb	r1, [r3, r2]
1288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           return HAL_TIMEOUT;
 1296              		.loc 1 1289 18
 1297 005a 0323     		movs	r3, #3
 1298 005c 2DE0     		b	.L63
 1299              	.L61:
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1300              		.loc 1 1273 9
 1301 005e FB68     		ldr	r3, [r7, #12]
 1302 0060 1B68     		ldr	r3, [r3]
 1303 0062 1B68     		ldr	r3, [r3]
 1304 0064 BA68     		ldr	r2, [r7, #8]
 1305 0066 1340     		ands	r3, r2
1273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
 1306              		.loc 1 1273 8
 1307 0068 BA68     		ldr	r2, [r7, #8]
 1308 006a 9A42     		cmp	r2, r3
 1309 006c D5D1     		bne	.L64
1290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   switch(EventType)
 1310              		.loc 1 1295 3
 1311 006e BB68     		ldr	r3, [r7, #8]
 1312 0070 802B     		cmp	r3, #128
 1313 0072 0BD1     		bne	.L65
1296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
1298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   case ADC_AWD_EVENT:
1299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
1300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1314              		.loc 1 1300 5
 1315 0074 FB68     		ldr	r3, [r7, #12]
 1316 0076 9B6B     		ldr	r3, [r3, #56]
 1317 0078 8022     		movs	r2, #128
 1318 007a 5202     		lsls	r2, r2, #9
 1319 007c 1A43     		orrs	r2, r3
 1320 007e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 47


 1321 0080 9A63     		str	r2, [r3, #56]
1301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1322              		.loc 1 1303 5
 1323 0082 FB68     		ldr	r3, [r7, #12]
 1324 0084 1B68     		ldr	r3, [r3]
 1325 0086 8022     		movs	r2, #128
 1326 0088 1A60     		str	r2, [r3]
1304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1327              		.loc 1 1304 5
 1328 008a 15E0     		b	.L66
 1329              	.L65:
1305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Overrun event */
1307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   default: /* Case ADC_OVR_EVENT */
1308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data, overrun event is not     */
1309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* considered as an error.                                                */
1310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
1312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 1330              		.loc 1 1312 19
 1331 008c FB68     		ldr	r3, [r7, #12]
 1332 008e 9B6A     		ldr	r3, [r3, #40]
 1333              		.loc 1 1312 8
 1334 0090 012B     		cmp	r3, #1
 1335 0092 0CD1     		bne	.L67
1313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 1336              		.loc 1 1315 7
 1337 0094 FB68     		ldr	r3, [r7, #12]
 1338 0096 9B6B     		ldr	r3, [r3, #56]
 1339 0098 8022     		movs	r2, #128
 1340 009a D200     		lsls	r2, r2, #3
 1341 009c 1A43     		orrs	r2, r3
 1342 009e FB68     		ldr	r3, [r7, #12]
 1343 00a0 9A63     		str	r2, [r3, #56]
1316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 1344              		.loc 1 1318 7
 1345 00a2 FB68     		ldr	r3, [r7, #12]
 1346 00a4 DB6B     		ldr	r3, [r3, #60]
 1347 00a6 0222     		movs	r2, #2
 1348 00a8 1A43     		orrs	r2, r3
 1349 00aa FB68     		ldr	r3, [r7, #12]
 1350 00ac DA63     		str	r2, [r3, #60]
 1351              	.L67:
1319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Overrun flag */
1322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 1352              		.loc 1 1322 5
 1353 00ae FB68     		ldr	r3, [r7, #12]
 1354 00b0 1B68     		ldr	r3, [r3]
 1355 00b2 1022     		movs	r2, #16
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 48


 1356 00b4 1A60     		str	r2, [r3]
1323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     break;
 1357              		.loc 1 1323 5
 1358 00b6 C046     		nop
 1359              	.L66:
1324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
1327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 1360              		.loc 1 1327 10
 1361 00b8 0023     		movs	r3, #0
 1362              	.L63:
1328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1363              		.loc 1 1328 1
 1364 00ba 1800     		movs	r0, r3
 1365 00bc BD46     		mov	sp, r7
 1366 00be 06B0     		add	sp, sp, #24
 1367              		@ sp needed
 1368 00c0 80BD     		pop	{r7, pc}
 1369              		.cfi_endproc
 1370              	.LFE47:
 1372              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1373              		.align	1
 1374              		.global	HAL_ADC_Start_IT
 1375              		.syntax unified
 1376              		.code	16
 1377              		.thumb_func
 1379              	HAL_ADC_Start_IT:
 1380              	.LFB48:
1329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - EOC (end of conversion of regular group) or EOS (end of 
1334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence of regular group) depending on ADC initialization 
1335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            parameter "EOCSelection"
1336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun (if available)
1337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1381              		.loc 1 1342 1
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 16
 1384              		@ frame_needed = 1, uses_anonymous_args = 0
 1385 0000 90B5     		push	{r4, r7, lr}
 1386              	.LCFI24:
 1387              		.cfi_def_cfa_offset 12
 1388              		.cfi_offset 4, -12
 1389              		.cfi_offset 7, -8
 1390              		.cfi_offset 14, -4
 1391 0002 85B0     		sub	sp, sp, #20
 1392              	.LCFI25:
 1393              		.cfi_def_cfa_offset 32
 1394 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 49


 1395              	.LCFI26:
 1396              		.cfi_def_cfa_register 7
 1397 0006 7860     		str	r0, [r7, #4]
1343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1398              		.loc 1 1343 21
 1399 0008 0F23     		movs	r3, #15
 1400 000a FB18     		adds	r3, r7, r3
 1401 000c 0022     		movs	r2, #0
 1402 000e 1A70     		strb	r2, [r3]
1344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1403              		.loc 1 1349 7
 1404 0010 7B68     		ldr	r3, [r7, #4]
 1405 0012 1B68     		ldr	r3, [r3]
 1406 0014 9B68     		ldr	r3, [r3, #8]
 1407 0016 0422     		movs	r2, #4
 1408 0018 1340     		ands	r3, r2
 1409              		.loc 1 1349 6
 1410 001a 56D1     		bne	.L69
1350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1411              		.loc 1 1352 5
 1412 001c 7B68     		ldr	r3, [r7, #4]
 1413 001e 3422     		movs	r2, #52
 1414 0020 9B5C     		ldrb	r3, [r3, r2]
 1415 0022 012B     		cmp	r3, #1
 1416 0024 01D1     		bne	.L70
 1417              		.loc 1 1352 5 is_stmt 0 discriminator 1
 1418 0026 0223     		movs	r3, #2
 1419 0028 56E0     		b	.L71
 1420              	.L70:
 1421              		.loc 1 1352 5 discriminator 2
 1422 002a 7B68     		ldr	r3, [r7, #4]
 1423 002c 3422     		movs	r2, #52
 1424 002e 0121     		movs	r1, #1
 1425 0030 9954     		strb	r1, [r3, r2]
1353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
1354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
1356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                   */
1357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 1426              		.loc 1 1357 19 is_stmt 1 discriminator 2
 1427 0032 7B68     		ldr	r3, [r7, #4]
 1428 0034 5B7E     		ldrb	r3, [r3, #25]
 1429              		.loc 1 1357 8 discriminator 2
 1430 0036 012B     		cmp	r3, #1
 1431 0038 07D0     		beq	.L72
1358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 1432              		.loc 1 1359 24
 1433 003a 0F23     		movs	r3, #15
 1434 003c FC18     		adds	r4, r7, r3
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 50


 1435 003e 7B68     		ldr	r3, [r7, #4]
 1436 0040 1800     		movs	r0, r3
 1437 0042 FFF7FEFF 		bl	ADC_Enable
 1438 0046 0300     		movs	r3, r0
 1439 0048 2370     		strb	r3, [r4]
 1440              	.L72:
1360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1441              		.loc 1 1363 8
 1442 004a 0F23     		movs	r3, #15
 1443 004c FB18     		adds	r3, r7, r3
 1444 004e 1B78     		ldrb	r3, [r3]
 1445 0050 002B     		cmp	r3, #0
 1446 0052 3ED1     		bne	.L73
1364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
1366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1447              		.loc 1 1368 7
 1448 0054 7B68     		ldr	r3, [r7, #4]
 1449 0056 9B6B     		ldr	r3, [r3, #56]
 1450 0058 214A     		ldr	r2, .L76
 1451 005a 1340     		ands	r3, r2
 1452 005c 8022     		movs	r2, #128
 1453 005e 5200     		lsls	r2, r2, #1
 1454 0060 1A43     		orrs	r2, r3
 1455 0062 7B68     		ldr	r3, [r7, #4]
 1456 0064 9A63     		str	r2, [r3, #56]
1369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1457              		.loc 1 1373 7
 1458 0066 7B68     		ldr	r3, [r7, #4]
 1459 0068 0022     		movs	r2, #0
 1460 006a DA63     		str	r2, [r3, #60]
1374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1461              		.loc 1 1378 7
 1462 006c 7B68     		ldr	r3, [r7, #4]
 1463 006e 3422     		movs	r2, #52
 1464 0070 0021     		movs	r1, #0
 1465 0072 9954     		strb	r1, [r3, r2]
1379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 1466              		.loc 1 1383 7
 1467 0074 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 51


 1468 0076 1B68     		ldr	r3, [r3]
 1469 0078 1C22     		movs	r2, #28
 1470 007a 1A60     		str	r2, [r3]
1384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */  
1387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       switch(hadc->Init.EOCSelection)
 1471              		.loc 1 1387 24
 1472 007c 7B68     		ldr	r3, [r7, #4]
 1473 007e 5B69     		ldr	r3, [r3, #20]
 1474              		.loc 1 1387 7
 1475 0080 082B     		cmp	r3, #8
 1476 0082 10D1     		bne	.L74
1388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV: 
1390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1477              		.loc 1 1390 11
 1478 0084 7B68     		ldr	r3, [r7, #4]
 1479 0086 1B68     		ldr	r3, [r3]
 1480 0088 5A68     		ldr	r2, [r3, #4]
 1481 008a 7B68     		ldr	r3, [r7, #4]
 1482 008c 1B68     		ldr	r3, [r3]
 1483 008e 0421     		movs	r1, #4
 1484 0090 8A43     		bics	r2, r1
 1485 0092 5A60     		str	r2, [r3, #4]
1391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 1486              		.loc 1 1391 11
 1487 0094 7B68     		ldr	r3, [r7, #4]
 1488 0096 1B68     		ldr	r3, [r3]
 1489 0098 5A68     		ldr	r2, [r3, #4]
 1490 009a 7B68     		ldr	r3, [r7, #4]
 1491 009c 1B68     		ldr	r3, [r3]
 1492 009e 1821     		movs	r1, #24
 1493 00a0 0A43     		orrs	r2, r1
 1494 00a2 5A60     		str	r2, [r3, #4]
1392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1495              		.loc 1 1392 11
 1496 00a4 08E0     		b	.L75
 1497              	.L74:
1393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         default:
1395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 1498              		.loc 1 1395 11
 1499 00a6 7B68     		ldr	r3, [r7, #4]
 1500 00a8 1B68     		ldr	r3, [r3]
 1501 00aa 5A68     		ldr	r2, [r3, #4]
 1502 00ac 7B68     		ldr	r3, [r7, #4]
 1503 00ae 1B68     		ldr	r3, [r3]
 1504 00b0 1C21     		movs	r1, #28
 1505 00b2 0A43     		orrs	r2, r1
 1506 00b4 5A60     		str	r2, [r3, #4]
1396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           break;
 1507              		.loc 1 1396 11
 1508 00b6 C046     		nop
 1509              	.L75:
1397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 52


1399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 1510              		.loc 1 1403 11
 1511 00b8 7B68     		ldr	r3, [r7, #4]
 1512 00ba 1B68     		ldr	r3, [r3]
 1513              		.loc 1 1403 26
 1514 00bc 9A68     		ldr	r2, [r3, #8]
 1515              		.loc 1 1403 11
 1516 00be 7B68     		ldr	r3, [r7, #4]
 1517 00c0 1B68     		ldr	r3, [r3]
 1518              		.loc 1 1403 26
 1519 00c2 0421     		movs	r1, #4
 1520 00c4 0A43     		orrs	r2, r1
 1521 00c6 9A60     		str	r2, [r3, #8]
 1522 00c8 03E0     		b	.L73
 1523              	.L69:
1404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 1524              		.loc 1 1408 20
 1525 00ca 0F23     		movs	r3, #15
 1526 00cc FB18     		adds	r3, r7, r3
 1527 00ce 0222     		movs	r2, #2
 1528 00d0 1A70     		strb	r2, [r3]
 1529              	.L73:
1409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }    
1410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 1530              		.loc 1 1412 10
 1531 00d2 0F23     		movs	r3, #15
 1532 00d4 FB18     		adds	r3, r7, r3
 1533 00d6 1B78     		ldrb	r3, [r3]
 1534              	.L71:
1413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1535              		.loc 1 1413 1
 1536 00d8 1800     		movs	r0, r3
 1537 00da BD46     		mov	sp, r7
 1538 00dc 05B0     		add	sp, sp, #20
 1539              		@ sp needed
 1540 00de 90BD     		pop	{r4, r7, pc}
 1541              	.L77:
 1542              		.align	2
 1543              	.L76:
 1544 00e0 FEF0FFFF 		.word	-3842
 1545              		.cfi_endproc
 1546              	.LFE48:
 1548              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1549              		.align	1
 1550              		.global	HAL_ADC_Stop_IT
 1551              		.syntax unified
 1552              		.code	16
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 53


 1553              		.thumb_func
 1555              	HAL_ADC_Stop_IT:
 1556              	.LFB49:
1414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable interruption of 
1418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1557              		.loc 1 1423 1
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 16
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561 0000 B0B5     		push	{r4, r5, r7, lr}
 1562              	.LCFI27:
 1563              		.cfi_def_cfa_offset 16
 1564              		.cfi_offset 4, -16
 1565              		.cfi_offset 5, -12
 1566              		.cfi_offset 7, -8
 1567              		.cfi_offset 14, -4
 1568 0002 84B0     		sub	sp, sp, #16
 1569              	.LCFI28:
 1570              		.cfi_def_cfa_offset 32
 1571 0004 00AF     		add	r7, sp, #0
 1572              	.LCFI29:
 1573              		.cfi_def_cfa_register 7
 1574 0006 7860     		str	r0, [r7, #4]
1424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1575              		.loc 1 1424 21
 1576 0008 0F23     		movs	r3, #15
 1577 000a FB18     		adds	r3, r7, r3
 1578 000c 0022     		movs	r2, #0
 1579 000e 1A70     		strb	r2, [r3]
1425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1580              		.loc 1 1430 3
 1581 0010 7B68     		ldr	r3, [r7, #4]
 1582 0012 3422     		movs	r2, #52
 1583 0014 9B5C     		ldrb	r3, [r3, r2]
 1584 0016 012B     		cmp	r3, #1
 1585 0018 01D1     		bne	.L79
 1586              		.loc 1 1430 3 is_stmt 0 discriminator 1
 1587 001a 0223     		movs	r3, #2
 1588 001c 33E0     		b	.L80
 1589              	.L79:
 1590              		.loc 1 1430 3 discriminator 2
 1591 001e 7B68     		ldr	r3, [r7, #4]
 1592 0020 3422     		movs	r2, #52
 1593 0022 0121     		movs	r1, #1
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 54


 1594 0024 9954     		strb	r1, [r3, r2]
1431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 1595              		.loc 1 1433 20 is_stmt 1 discriminator 2
 1596 0026 0F25     		movs	r5, #15
 1597 0028 7C19     		adds	r4, r7, r5
 1598 002a 7B68     		ldr	r3, [r7, #4]
 1599 002c 1800     		movs	r0, r3
 1600 002e FFF7FEFF 		bl	ADC_ConversionStop
 1601 0032 0300     		movs	r3, r0
 1602 0034 2370     		strb	r3, [r4]
1434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1603              		.loc 1 1436 6 discriminator 2
 1604 0036 2800     		movs	r0, r5
 1605 0038 3B18     		adds	r3, r7, r0
 1606 003a 1B78     		ldrb	r3, [r3]
 1607 003c 002B     		cmp	r3, #0
 1608 003e 1BD1     		bne	.L81
1437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 1609              		.loc 1 1440 5
 1610 0040 7B68     		ldr	r3, [r7, #4]
 1611 0042 1B68     		ldr	r3, [r3]
 1612 0044 5A68     		ldr	r2, [r3, #4]
 1613 0046 7B68     		ldr	r3, [r7, #4]
 1614 0048 1B68     		ldr	r3, [r3]
 1615 004a 1C21     		movs	r1, #28
 1616 004c 8A43     		bics	r2, r1
 1617 004e 5A60     		str	r2, [r3, #4]
1441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 1618              		.loc 1 1443 22
 1619 0050 0500     		movs	r5, r0
 1620 0052 3C18     		adds	r4, r7, r0
 1621 0054 7B68     		ldr	r3, [r7, #4]
 1622 0056 1800     		movs	r0, r3
 1623 0058 FFF7FEFF 		bl	ADC_Disable
 1624 005c 0300     		movs	r3, r0
 1625 005e 2370     		strb	r3, [r4]
1444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1626              		.loc 1 1446 8
 1627 0060 7B19     		adds	r3, r7, r5
 1628 0062 1B78     		ldrb	r3, [r3]
 1629 0064 002B     		cmp	r3, #0
 1630 0066 07D1     		bne	.L81
1447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1631              		.loc 1 1449 7
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 55


 1632 0068 7B68     		ldr	r3, [r7, #4]
 1633 006a 9B6B     		ldr	r3, [r3, #56]
 1634 006c 084A     		ldr	r2, .L82
 1635 006e 1340     		ands	r3, r2
 1636 0070 0122     		movs	r2, #1
 1637 0072 1A43     		orrs	r2, r3
 1638 0074 7B68     		ldr	r3, [r7, #4]
 1639 0076 9A63     		str	r2, [r3, #56]
 1640              	.L81:
1450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1641              		.loc 1 1456 3
 1642 0078 7B68     		ldr	r3, [r7, #4]
 1643 007a 3422     		movs	r2, #52
 1644 007c 0021     		movs	r1, #0
 1645 007e 9954     		strb	r1, [r3, r2]
1457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 1646              		.loc 1 1459 10
 1647 0080 0F23     		movs	r3, #15
 1648 0082 FB18     		adds	r3, r7, r3
 1649 0084 1B78     		ldrb	r3, [r3]
 1650              	.L80:
1460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1651              		.loc 1 1460 1
 1652 0086 1800     		movs	r0, r3
 1653 0088 BD46     		mov	sp, r7
 1654 008a 04B0     		add	sp, sp, #16
 1655              		@ sp needed
 1656 008c B0BD     		pop	{r4, r5, r7, pc}
 1657              	.L83:
 1658 008e C046     		.align	2
 1659              	.L82:
 1660 0090 FEFEFFFF 		.word	-258
 1661              		.cfi_endproc
 1662              	.LFE49:
 1664              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1665              		.align	1
 1666              		.global	HAL_ADC_Start_DMA
 1667              		.syntax unified
 1668              		.code	16
 1669              		.thumb_func
 1671              	HAL_ADC_Start_DMA:
 1672              	.LFB50:
1461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         through DMA.
1465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Interruptions enabled in this function:
1466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA transfer complete
1467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - DMA half transfer
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 56


1468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - overrun
1469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  pData The destination Buffer address.
1472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 1673              		.loc 1 1476 1
 1674              		.cfi_startproc
 1675              		@ args = 0, pretend = 0, frame = 24
 1676              		@ frame_needed = 1, uses_anonymous_args = 0
 1677 0000 90B5     		push	{r4, r7, lr}
 1678              	.LCFI30:
 1679              		.cfi_def_cfa_offset 12
 1680              		.cfi_offset 4, -12
 1681              		.cfi_offset 7, -8
 1682              		.cfi_offset 14, -4
 1683 0002 87B0     		sub	sp, sp, #28
 1684              	.LCFI31:
 1685              		.cfi_def_cfa_offset 40
 1686 0004 00AF     		add	r7, sp, #0
 1687              	.LCFI32:
 1688              		.cfi_def_cfa_register 7
 1689 0006 F860     		str	r0, [r7, #12]
 1690 0008 B960     		str	r1, [r7, #8]
 1691 000a 7A60     		str	r2, [r7, #4]
1477:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1692              		.loc 1 1477 21
 1693 000c 1723     		movs	r3, #23
 1694 000e FB18     		adds	r3, r7, r3
 1695 0010 0022     		movs	r2, #0
 1696 0012 1A70     		strb	r2, [r3]
1478:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1479:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1480:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1481:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1482:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1483:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 1697              		.loc 1 1483 7
 1698 0014 FB68     		ldr	r3, [r7, #12]
 1699 0016 1B68     		ldr	r3, [r3]
 1700 0018 9B68     		ldr	r3, [r3, #8]
 1701 001a 0422     		movs	r2, #4
 1702 001c 1340     		ands	r3, r2
 1703              		.loc 1 1483 6
 1704 001e 5ED1     		bne	.L85
1484:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1485:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Process locked */
1486:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1705              		.loc 1 1486 5
 1706 0020 FB68     		ldr	r3, [r7, #12]
 1707 0022 3422     		movs	r2, #52
 1708 0024 9B5C     		ldrb	r3, [r3, r2]
 1709 0026 012B     		cmp	r3, #1
 1710 0028 01D1     		bne	.L86
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 57


 1711              		.loc 1 1486 5 is_stmt 0 discriminator 1
 1712 002a 0223     		movs	r3, #2
 1713 002c 5EE0     		b	.L87
 1714              	.L86:
 1715              		.loc 1 1486 5 discriminator 2
 1716 002e FB68     		ldr	r3, [r7, #12]
 1717 0030 3422     		movs	r2, #52
 1718 0032 0121     		movs	r1, #1
 1719 0034 9954     		strb	r1, [r3, r2]
1487:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1488:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
1489:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
1490:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* performed automatically by hardware.                                     */
1491:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 1720              		.loc 1 1491 19 is_stmt 1 discriminator 2
 1721 0036 FB68     		ldr	r3, [r7, #12]
 1722 0038 5B7E     		ldrb	r3, [r3, #25]
 1723              		.loc 1 1491 8 discriminator 2
 1724 003a 012B     		cmp	r3, #1
 1725 003c 07D0     		beq	.L88
1492:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1493:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 1726              		.loc 1 1493 24
 1727 003e 1723     		movs	r3, #23
 1728 0040 FC18     		adds	r4, r7, r3
 1729 0042 FB68     		ldr	r3, [r7, #12]
 1730 0044 1800     		movs	r0, r3
 1731 0046 FFF7FEFF 		bl	ADC_Enable
 1732 004a 0300     		movs	r3, r0
 1733 004c 2370     		strb	r3, [r4]
 1734              	.L88:
1494:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1495:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1496:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1497:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1735              		.loc 1 1497 8
 1736 004e 1723     		movs	r3, #23
 1737 0050 FB18     		adds	r3, r7, r3
 1738 0052 1B78     		ldrb	r3, [r3]
 1739 0054 002B     		cmp	r3, #0
 1740 0056 46D1     		bne	.L89
1498:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1499:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state                                                        */
1500:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1501:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1502:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1741              		.loc 1 1502 7
 1742 0058 FB68     		ldr	r3, [r7, #12]
 1743 005a 9B6B     		ldr	r3, [r3, #56]
 1744 005c 254A     		ldr	r2, .L90
 1745 005e 1340     		ands	r3, r2
 1746 0060 8022     		movs	r2, #128
 1747 0062 5200     		lsls	r2, r2, #1
 1748 0064 1A43     		orrs	r2, r3
 1749 0066 FB68     		ldr	r3, [r7, #12]
 1750 0068 9A63     		str	r2, [r3, #56]
1503:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 58


1504:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1505:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1506:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset ADC all error code fields */
1507:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1751              		.loc 1 1507 7
 1752 006a FB68     		ldr	r3, [r7, #12]
 1753 006c 0022     		movs	r2, #0
 1754 006e DA63     		str	r2, [r3, #60]
1508:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1509:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Process unlocked */
1510:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1511:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1512:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1755              		.loc 1 1512 7
 1756 0070 FB68     		ldr	r3, [r7, #12]
 1757 0072 3422     		movs	r2, #52
 1758 0074 0021     		movs	r1, #0
 1759 0076 9954     		strb	r1, [r3, r2]
1513:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1514:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1515:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1760              		.loc 1 1515 11
 1761 0078 FB68     		ldr	r3, [r7, #12]
 1762 007a 1B6B     		ldr	r3, [r3, #48]
 1763              		.loc 1 1515 42
 1764 007c 1E4A     		ldr	r2, .L90+4
 1765 007e 9A62     		str	r2, [r3, #40]
1516:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1517:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1518:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1766              		.loc 1 1518 11
 1767 0080 FB68     		ldr	r3, [r7, #12]
 1768 0082 1B6B     		ldr	r3, [r3, #48]
 1769              		.loc 1 1518 46
 1770 0084 1D4A     		ldr	r2, .L90+8
 1771 0086 DA62     		str	r2, [r3, #44]
1519:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1520:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the DMA error callback */
1521:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1772              		.loc 1 1521 11
 1773 0088 FB68     		ldr	r3, [r7, #12]
 1774 008a 1B6B     		ldr	r3, [r3, #48]
 1775              		.loc 1 1521 43
 1776 008c 1C4A     		ldr	r2, .L90+12
 1777 008e 1A63     		str	r2, [r3, #48]
1522:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1523:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1524:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1525:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1526:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1527:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1528:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1529:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* operations)                                                          */
1530:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 1778              		.loc 1 1530 7
 1779 0090 FB68     		ldr	r3, [r7, #12]
 1780 0092 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 59


 1781 0094 1C22     		movs	r2, #28
 1782 0096 1A60     		str	r2, [r3]
1531:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1532:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1533:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 1783              		.loc 1 1533 7
 1784 0098 FB68     		ldr	r3, [r7, #12]
 1785 009a 1B68     		ldr	r3, [r3]
 1786 009c 5A68     		ldr	r2, [r3, #4]
 1787 009e FB68     		ldr	r3, [r7, #12]
 1788 00a0 1B68     		ldr	r3, [r3]
 1789 00a2 1021     		movs	r1, #16
 1790 00a4 0A43     		orrs	r2, r1
 1791 00a6 5A60     		str	r2, [r3, #4]
1534:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1535:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable ADC DMA mode */
1536:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 1792              		.loc 1 1536 11
 1793 00a8 FB68     		ldr	r3, [r7, #12]
 1794 00aa 1B68     		ldr	r3, [r3]
 1795              		.loc 1 1536 29
 1796 00ac DA68     		ldr	r2, [r3, #12]
 1797              		.loc 1 1536 11
 1798 00ae FB68     		ldr	r3, [r7, #12]
 1799 00b0 1B68     		ldr	r3, [r3]
 1800              		.loc 1 1536 29
 1801 00b2 0121     		movs	r1, #1
 1802 00b4 0A43     		orrs	r2, r1
 1803 00b6 DA60     		str	r2, [r3, #12]
1537:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1538:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Start the DMA channel */
1539:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1804              		.loc 1 1539 7
 1805 00b8 FB68     		ldr	r3, [r7, #12]
 1806 00ba 186B     		ldr	r0, [r3, #48]
 1807              		.loc 1 1539 57
 1808 00bc FB68     		ldr	r3, [r7, #12]
 1809 00be 1B68     		ldr	r3, [r3]
 1810              		.loc 1 1539 52
 1811 00c0 4033     		adds	r3, r3, #64
 1812              		.loc 1 1539 7
 1813 00c2 1900     		movs	r1, r3
 1814 00c4 BA68     		ldr	r2, [r7, #8]
 1815 00c6 7B68     		ldr	r3, [r7, #4]
 1816 00c8 FFF7FEFF 		bl	HAL_DMA_Start_IT
1540:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****            
1541:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1542:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1543:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1544:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* trigger event.                                                       */
1545:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTART;
 1817              		.loc 1 1545 11
 1818 00cc FB68     		ldr	r3, [r7, #12]
 1819 00ce 1B68     		ldr	r3, [r3]
 1820              		.loc 1 1545 26
 1821 00d0 9A68     		ldr	r2, [r3, #8]
 1822              		.loc 1 1545 11
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 60


 1823 00d2 FB68     		ldr	r3, [r7, #12]
 1824 00d4 1B68     		ldr	r3, [r3]
 1825              		.loc 1 1545 26
 1826 00d6 0421     		movs	r1, #4
 1827 00d8 0A43     		orrs	r2, r1
 1828 00da 9A60     		str	r2, [r3, #8]
 1829 00dc 03E0     		b	.L89
 1830              	.L85:
1546:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1547:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1548:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
1549:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1550:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 1831              		.loc 1 1550 20
 1832 00de 1723     		movs	r3, #23
 1833 00e0 FB18     		adds	r3, r7, r3
 1834 00e2 0222     		movs	r2, #2
 1835 00e4 1A70     		strb	r2, [r3]
 1836              	.L89:
1551:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1552:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1553:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1554:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 1837              		.loc 1 1554 10
 1838 00e6 1723     		movs	r3, #23
 1839 00e8 FB18     		adds	r3, r7, r3
 1840 00ea 1B78     		ldrb	r3, [r3]
 1841              	.L87:
1555:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 1842              		.loc 1 1555 1
 1843 00ec 1800     		movs	r0, r3
 1844 00ee BD46     		mov	sp, r7
 1845 00f0 07B0     		add	sp, sp, #28
 1846              		@ sp needed
 1847 00f2 90BD     		pop	{r4, r7, pc}
 1848              	.L91:
 1849              		.align	2
 1850              	.L90:
 1851 00f4 FEF0FFFF 		.word	-3842
 1852 00f8 00000000 		.word	ADC_DMAConvCplt
 1853 00fc 00000000 		.word	ADC_DMAHalfConvCplt
 1854 0100 00000000 		.word	ADC_DMAError
 1855              		.cfi_endproc
 1856              	.LFE50:
 1858              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1859              		.align	1
 1860              		.global	HAL_ADC_Stop_DMA
 1861              		.syntax unified
 1862              		.code	16
 1863              		.thumb_func
 1865              	HAL_ADC_Stop_DMA:
 1866              	.LFB51:
1556:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1557:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1558:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group, disable ADC DMA transfer, disable 
1559:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         ADC peripheral.
1560:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 61


1561:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1562:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
1563:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1564:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1565:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {  
 1867              		.loc 1 1565 1
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 16
 1870              		@ frame_needed = 1, uses_anonymous_args = 0
 1871 0000 B0B5     		push	{r4, r5, r7, lr}
 1872              	.LCFI33:
 1873              		.cfi_def_cfa_offset 16
 1874              		.cfi_offset 4, -16
 1875              		.cfi_offset 5, -12
 1876              		.cfi_offset 7, -8
 1877              		.cfi_offset 14, -4
 1878 0002 84B0     		sub	sp, sp, #16
 1879              	.LCFI34:
 1880              		.cfi_def_cfa_offset 32
 1881 0004 00AF     		add	r7, sp, #0
 1882              	.LCFI35:
 1883              		.cfi_def_cfa_register 7
 1884 0006 7860     		str	r0, [r7, #4]
1566:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1885              		.loc 1 1566 21
 1886 0008 0F23     		movs	r3, #15
 1887 000a FB18     		adds	r3, r7, r3
 1888 000c 0022     		movs	r2, #0
 1889 000e 1A70     		strb	r2, [r3]
1567:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1568:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1569:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1570:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1571:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1572:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1890              		.loc 1 1572 3
 1891 0010 7B68     		ldr	r3, [r7, #4]
 1892 0012 3422     		movs	r2, #52
 1893 0014 9B5C     		ldrb	r3, [r3, r2]
 1894 0016 012B     		cmp	r3, #1
 1895 0018 01D1     		bne	.L93
 1896              		.loc 1 1572 3 is_stmt 0 discriminator 1
 1897 001a 0223     		movs	r3, #2
 1898 001c 5FE0     		b	.L94
 1899              	.L93:
 1900              		.loc 1 1572 3 discriminator 2
 1901 001e 7B68     		ldr	r3, [r7, #4]
 1902 0020 3422     		movs	r2, #52
 1903 0022 0121     		movs	r1, #1
 1904 0024 9954     		strb	r1, [r3, r2]
1573:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1574:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on regular group */
1575:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 1905              		.loc 1 1575 20 is_stmt 1 discriminator 2
 1906 0026 0F25     		movs	r5, #15
 1907 0028 7C19     		adds	r4, r7, r5
 1908 002a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 62


 1909 002c 1800     		movs	r0, r3
 1910 002e FFF7FEFF 		bl	ADC_ConversionStop
 1911 0032 0300     		movs	r3, r0
 1912 0034 2370     		strb	r3, [r4]
1576:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1577:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1578:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1913              		.loc 1 1578 6 discriminator 2
 1914 0036 2800     		movs	r0, r5
 1915 0038 3B18     		adds	r3, r7, r0
 1916 003a 1B78     		ldrb	r3, [r3]
 1917 003c 002B     		cmp	r3, #0
 1918 003e 47D1     		bne	.L95
1579:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1580:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1581:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 1919              		.loc 1 1581 9
 1920 0040 7B68     		ldr	r3, [r7, #4]
 1921 0042 1B68     		ldr	r3, [r3]
 1922              		.loc 1 1581 27
 1923 0044 DA68     		ldr	r2, [r3, #12]
 1924              		.loc 1 1581 9
 1925 0046 7B68     		ldr	r3, [r7, #4]
 1926 0048 1B68     		ldr	r3, [r3]
 1927              		.loc 1 1581 27
 1928 004a 0121     		movs	r1, #1
 1929 004c 8A43     		bics	r2, r1
 1930 004e DA60     		str	r2, [r3, #12]
1582:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1583:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1584:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1585:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 1931              		.loc 1 1585 13
 1932 0050 7B68     		ldr	r3, [r7, #4]
 1933 0052 1B6B     		ldr	r3, [r3, #48]
 1934              		.loc 1 1585 25
 1935 0054 2122     		movs	r2, #33
 1936 0056 9B5C     		ldrb	r3, [r3, r2]
 1937 0058 DBB2     		uxtb	r3, r3
 1938              		.loc 1 1585 8
 1939 005a 022B     		cmp	r3, #2
 1940 005c 12D1     		bne	.L96
1586:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1587:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 1941              		.loc 1 1587 24
 1942 005e 7B68     		ldr	r3, [r7, #4]
 1943 0060 1B6B     		ldr	r3, [r3, #48]
 1944 0062 0500     		movs	r5, r0
 1945 0064 3C18     		adds	r4, r7, r0
 1946 0066 1800     		movs	r0, r3
 1947 0068 FFF7FEFF 		bl	HAL_DMA_Abort
 1948 006c 0300     		movs	r3, r0
 1949 006e 2370     		strb	r3, [r4]
1588:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1589:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
1590:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (tmp_hal_status != HAL_OK)
 1950              		.loc 1 1590 10
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 63


 1951 0070 7B19     		adds	r3, r7, r5
 1952 0072 1B78     		ldrb	r3, [r3]
 1953 0074 002B     		cmp	r3, #0
 1954 0076 05D0     		beq	.L96
1591:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1592:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Update ADC state machine to error */
1593:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 1955              		.loc 1 1593 9
 1956 0078 7B68     		ldr	r3, [r7, #4]
 1957 007a 9B6B     		ldr	r3, [r3, #56]
 1958 007c 4022     		movs	r2, #64
 1959 007e 1A43     		orrs	r2, r3
 1960 0080 7B68     		ldr	r3, [r7, #4]
 1961 0082 9A63     		str	r2, [r3, #56]
 1962              	.L96:
1594:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1595:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1596:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1597:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1598:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 1963              		.loc 1 1598 5
 1964 0084 7B68     		ldr	r3, [r7, #4]
 1965 0086 1B68     		ldr	r3, [r3]
 1966 0088 5A68     		ldr	r2, [r3, #4]
 1967 008a 7B68     		ldr	r3, [r7, #4]
 1968 008c 1B68     		ldr	r3, [r3]
 1969 008e 1021     		movs	r1, #16
 1970 0090 8A43     		bics	r2, r1
 1971 0092 5A60     		str	r2, [r3, #4]
1599:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1600:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1601:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
1602:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* in memory a potential failing status.                                  */
1603:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1972              		.loc 1 1603 8
 1973 0094 0F22     		movs	r2, #15
 1974 0096 BB18     		adds	r3, r7, r2
 1975 0098 1B78     		ldrb	r3, [r3]
 1976 009a 002B     		cmp	r3, #0
 1977 009c 07D1     		bne	.L97
1604:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1605:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
 1978              		.loc 1 1605 24
 1979 009e BC18     		adds	r4, r7, r2
 1980 00a0 7B68     		ldr	r3, [r7, #4]
 1981 00a2 1800     		movs	r0, r3
 1982 00a4 FFF7FEFF 		bl	ADC_Disable
 1983 00a8 0300     		movs	r3, r0
 1984 00aa 2370     		strb	r3, [r4]
 1985 00ac 03E0     		b	.L98
 1986              	.L97:
1606:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1607:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1608:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1609:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_Disable(hadc);
 1987              		.loc 1 1609 7
 1988 00ae 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 64


 1989 00b0 1800     		movs	r0, r3
 1990 00b2 FFF7FEFF 		bl	ADC_Disable
 1991              	.L98:
1610:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1611:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1612:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1613:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1992              		.loc 1 1613 8
 1993 00b6 0F23     		movs	r3, #15
 1994 00b8 FB18     		adds	r3, r7, r3
 1995 00ba 1B78     		ldrb	r3, [r3]
 1996 00bc 002B     		cmp	r3, #0
 1997 00be 07D1     		bne	.L95
1614:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1615:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1616:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1998              		.loc 1 1616 7
 1999 00c0 7B68     		ldr	r3, [r7, #4]
 2000 00c2 9B6B     		ldr	r3, [r3, #56]
 2001 00c4 084A     		ldr	r2, .L99
 2002 00c6 1340     		ands	r3, r2
 2003 00c8 0122     		movs	r2, #1
 2004 00ca 1A43     		orrs	r2, r3
 2005 00cc 7B68     		ldr	r3, [r7, #4]
 2006 00ce 9A63     		str	r2, [r3, #56]
 2007              	.L95:
1617:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1618:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1619:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1620:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1621:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1622:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1623:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
1624:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2008              		.loc 1 1624 3
 2009 00d0 7B68     		ldr	r3, [r7, #4]
 2010 00d2 3422     		movs	r2, #52
 2011 00d4 0021     		movs	r1, #0
 2012 00d6 9954     		strb	r1, [r3, r2]
1625:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1626:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
1627:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 2013              		.loc 1 1627 10
 2014 00d8 0F23     		movs	r3, #15
 2015 00da FB18     		adds	r3, r7, r3
 2016 00dc 1B78     		ldrb	r3, [r3]
 2017              	.L94:
1628:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2018              		.loc 1 1628 1
 2019 00de 1800     		movs	r0, r3
 2020 00e0 BD46     		mov	sp, r7
 2021 00e2 04B0     		add	sp, sp, #16
 2022              		@ sp needed
 2023 00e4 B0BD     		pop	{r4, r5, r7, pc}
 2024              	.L100:
 2025 00e6 C046     		.align	2
 2026              	.L99:
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 65


 2027 00e8 FEFEFFFF 		.word	-258
 2028              		.cfi_endproc
 2029              	.LFE51:
 2031              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 2032              		.align	1
 2033              		.global	HAL_ADC_GetValue
 2034              		.syntax unified
 2035              		.code	16
 2036              		.thumb_func
 2038              	HAL_ADC_GetValue:
 2039              	.LFB52:
1629:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1630:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1631:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1632:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1633:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1634:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1635:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1636:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1637:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1638:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            to flag EOC.
1639:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1640:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1641:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1642:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         To clear this flag, either use function: 
1643:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1644:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1645:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1646:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1647:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC group regular conversion data
1648:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1649:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1650:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2040              		.loc 1 1650 1
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 8
 2043              		@ frame_needed = 1, uses_anonymous_args = 0
 2044 0000 80B5     		push	{r7, lr}
 2045              	.LCFI36:
 2046              		.cfi_def_cfa_offset 8
 2047              		.cfi_offset 7, -8
 2048              		.cfi_offset 14, -4
 2049 0002 82B0     		sub	sp, sp, #8
 2050              	.LCFI37:
 2051              		.cfi_def_cfa_offset 16
 2052 0004 00AF     		add	r7, sp, #0
 2053              	.LCFI38:
 2054              		.cfi_def_cfa_register 7
 2055 0006 7860     		str	r0, [r7, #4]
1651:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1652:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1653:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1654:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1655:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1656:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1657:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC converted value */ 
1658:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->Instance->DR;
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 66


 2056              		.loc 1 1658 14
 2057 0008 7B68     		ldr	r3, [r7, #4]
 2058 000a 1B68     		ldr	r3, [r3]
 2059              		.loc 1 1658 24
 2060 000c 1B6C     		ldr	r3, [r3, #64]
1659:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2061              		.loc 1 1659 1
 2062 000e 1800     		movs	r0, r3
 2063 0010 BD46     		mov	sp, r7
 2064 0012 02B0     		add	sp, sp, #8
 2065              		@ sp needed
 2066 0014 80BD     		pop	{r7, pc}
 2067              		.cfi_endproc
 2068              	.LFE52:
 2070              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2071              		.align	1
 2072              		.global	HAL_ADC_IRQHandler
 2073              		.syntax unified
 2074              		.code	16
 2075              		.thumb_func
 2077              	HAL_ADC_IRQHandler:
 2078              	.LFB53:
1660:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1661:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1662:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Handles ADC interrupt request.  
1663:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1664:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1665:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1666:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1667:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2079              		.loc 1 1667 1
 2080              		.cfi_startproc
 2081              		@ args = 0, pretend = 0, frame = 16
 2082              		@ frame_needed = 1, uses_anonymous_args = 0
 2083 0000 80B5     		push	{r7, lr}
 2084              	.LCFI39:
 2085              		.cfi_def_cfa_offset 8
 2086              		.cfi_offset 7, -8
 2087              		.cfi_offset 14, -4
 2088 0002 84B0     		sub	sp, sp, #16
 2089              	.LCFI40:
 2090              		.cfi_def_cfa_offset 24
 2091 0004 00AF     		add	r7, sp, #0
 2092              	.LCFI41:
 2093              		.cfi_def_cfa_register 7
 2094 0006 7860     		str	r0, [r7, #4]
1668:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
 2095              		.loc 1 1668 26
 2096 0008 7B68     		ldr	r3, [r7, #4]
 2097 000a 1B68     		ldr	r3, [r3]
 2098              		.loc 1 1668 12
 2099 000c 1B68     		ldr	r3, [r3]
 2100 000e FB60     		str	r3, [r7, #12]
1669:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 2101              		.loc 1 1669 26
 2102 0010 7B68     		ldr	r3, [r7, #4]
 2103 0012 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 67


 2104              		.loc 1 1669 12
 2105 0014 5B68     		ldr	r3, [r3, #4]
 2106 0016 BB60     		str	r3, [r7, #8]
1670:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1671:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1672:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1673:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1674:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1675:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1676:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 2107              		.loc 1 1677 18
 2108 0018 FB68     		ldr	r3, [r7, #12]
 2109 001a 0422     		movs	r2, #4
 2110 001c 1340     		ands	r3, r2
 2111              		.loc 1 1677 5
 2112 001e 03D0     		beq	.L104
 2113              		.loc 1 1677 64 discriminator 1
 2114 0020 BB68     		ldr	r3, [r7, #8]
 2115 0022 0422     		movs	r2, #4
 2116 0024 1340     		ands	r3, r2
 2117              		.loc 1 1677 51 discriminator 1
 2118 0026 07D1     		bne	.L105
 2119              	.L104:
1678:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 2120              		.loc 1 1678 18 discriminator 3
 2121 0028 FB68     		ldr	r3, [r7, #12]
 2122 002a 0822     		movs	r2, #8
 2123 002c 1340     		ands	r3, r2
1677:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 2124              		.loc 1 1677 94 discriminator 3
 2125 002e 49D0     		beq	.L106
 2126              		.loc 1 1678 64
 2127 0030 BB68     		ldr	r3, [r7, #8]
 2128 0032 0822     		movs	r2, #8
 2129 0034 1340     		ands	r3, r2
 2130              		.loc 1 1678 51
 2131 0036 45D0     		beq	.L106
 2132              	.L105:
1679:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1680:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1681:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2133              		.loc 1 1681 9
 2134 0038 7B68     		ldr	r3, [r7, #4]
 2135 003a 9B6B     		ldr	r3, [r3, #56]
 2136 003c 1022     		movs	r2, #16
 2137 003e 1340     		ands	r3, r2
 2138              		.loc 1 1681 8
 2139 0040 06D1     		bne	.L107
1682:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1683:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1684:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 2140              		.loc 1 1684 7
 2141 0042 7B68     		ldr	r3, [r7, #4]
 2142 0044 9B6B     		ldr	r3, [r3, #56]
 2143 0046 8022     		movs	r2, #128
 2144 0048 9200     		lsls	r2, r2, #2
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 68


 2145 004a 1A43     		orrs	r2, r3
 2146 004c 7B68     		ldr	r3, [r7, #4]
 2147 004e 9A63     		str	r2, [r3, #56]
 2148              	.L107:
1685:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1686:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1687:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1688:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
1689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 2149              		.loc 1 1689 8
 2150 0050 7B68     		ldr	r3, [r7, #4]
 2151 0052 1B68     		ldr	r3, [r3]
 2152 0054 DA68     		ldr	r2, [r3, #12]
 2153 0056 C023     		movs	r3, #192
 2154 0058 1B01     		lsls	r3, r3, #4
 2155 005a 1340     		ands	r3, r2
 2156              		.loc 1 1689 7
 2157 005c 2AD1     		bne	.L108
1690:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2158              		.loc 1 1690 19 discriminator 1
 2159 005e 7B68     		ldr	r3, [r7, #4]
 2160 0060 9B7E     		ldrb	r3, [r3, #26]
1689:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 2161              		.loc 1 1689 51 discriminator 1
 2162 0062 002B     		cmp	r3, #0
 2163 0064 26D1     		bne	.L108
1691:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1692:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
1693:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 2164              		.loc 1 1693 19
 2165 0066 FB68     		ldr	r3, [r7, #12]
 2166 0068 0822     		movs	r2, #8
 2167 006a 1340     		ands	r3, r2
 2168              		.loc 1 1693 9
 2169 006c 22D0     		beq	.L108
1694:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1695:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1696:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1697:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 2170              		.loc 1 1697 13
 2171 006e 7B68     		ldr	r3, [r7, #4]
 2172 0070 1B68     		ldr	r3, [r3]
 2173 0072 9B68     		ldr	r3, [r3, #8]
 2174 0074 0422     		movs	r2, #4
 2175 0076 1340     		ands	r3, r2
 2176              		.loc 1 1697 12
 2177 0078 10D1     		bne	.L109
1698:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1699:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1700:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1701:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1702:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1703:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 2178              		.loc 1 1703 11
 2179 007a 7B68     		ldr	r3, [r7, #4]
 2180 007c 1B68     		ldr	r3, [r3]
 2181 007e 5A68     		ldr	r2, [r3, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 69


 2182 0080 7B68     		ldr	r3, [r7, #4]
 2183 0082 1B68     		ldr	r3, [r3]
 2184 0084 0C21     		movs	r1, #12
 2185 0086 8A43     		bics	r2, r1
 2186 0088 5A60     		str	r2, [r3, #4]
1704:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1705:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
1706:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
 2187              		.loc 1 1706 11
 2188 008a 7B68     		ldr	r3, [r7, #4]
 2189 008c 9B6B     		ldr	r3, [r3, #56]
 2190 008e 2D4A     		ldr	r2, .L115
 2191 0090 1340     		ands	r3, r2
 2192 0092 0122     		movs	r2, #1
 2193 0094 1A43     		orrs	r2, r3
 2194 0096 7B68     		ldr	r3, [r7, #4]
 2195 0098 9A63     		str	r2, [r3, #56]
 2196 009a 0BE0     		b	.L108
 2197              	.L109:
1707:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1708:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1709:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1710:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
1711:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1712:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
1713:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2198              		.loc 1 1713 11
 2199 009c 7B68     		ldr	r3, [r7, #4]
 2200 009e 9B6B     		ldr	r3, [r3, #56]
 2201 00a0 2022     		movs	r2, #32
 2202 00a2 1A43     		orrs	r2, r3
 2203 00a4 7B68     		ldr	r3, [r7, #4]
 2204 00a6 9A63     		str	r2, [r3, #56]
1714:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1715:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
1716:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 2205              		.loc 1 1716 11
 2206 00a8 7B68     		ldr	r3, [r7, #4]
 2207 00aa DB6B     		ldr	r3, [r3, #60]
 2208 00ac 0122     		movs	r2, #1
 2209 00ae 1A43     		orrs	r2, r3
 2210 00b0 7B68     		ldr	r3, [r7, #4]
 2211 00b2 DA63     		str	r2, [r3, #60]
 2212              	.L108:
1717:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1718:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1719:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1720:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1721:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: into callback, to determine if conversion has been triggered     */
1722:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       from EOC or EOS, possibility to use:                             */
1723:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
1724:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1725:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->ConvCpltCallback(hadc);
1726:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #else
1727:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 2213              		.loc 1 1727 5
 2214 00b4 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 70


 2215 00b6 1800     		movs	r0, r3
 2216 00b8 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1728:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1729:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1730:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1731:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear regular group conversion flag */
1732:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1733:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1734:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1735:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1736:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 2217              		.loc 1 1736 5
 2218 00bc 7B68     		ldr	r3, [r7, #4]
 2219 00be 1B68     		ldr	r3, [r3]
 2220 00c0 0C22     		movs	r2, #12
 2221 00c2 1A60     		str	r2, [r3]
 2222              	.L106:
1737:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1738:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1739:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1740:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 2223              		.loc 1 1740 16
 2224 00c4 FB68     		ldr	r3, [r7, #12]
 2225 00c6 8022     		movs	r2, #128
 2226 00c8 1340     		ands	r3, r2
 2227              		.loc 1 1740 5
 2228 00ca 12D0     		beq	.L110
 2229              		.loc 1 1740 62 discriminator 1
 2230 00cc BB68     		ldr	r3, [r7, #8]
 2231 00ce 8022     		movs	r2, #128
 2232 00d0 1340     		ands	r3, r2
 2233              		.loc 1 1740 49 discriminator 1
 2234 00d2 0ED0     		beq	.L110
1741:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1742:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC state */
1743:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 2235              		.loc 1 1743 7
 2236 00d4 7B68     		ldr	r3, [r7, #4]
 2237 00d6 9B6B     		ldr	r3, [r3, #56]
 2238 00d8 8022     		movs	r2, #128
 2239 00da 5202     		lsls	r2, r2, #9
 2240 00dc 1A43     		orrs	r2, r3
 2241 00de 7B68     		ldr	r3, [r7, #4]
 2242 00e0 9A63     		str	r2, [r3, #56]
1744:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1745:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1746:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->LevelOutOfWindowCallback(hadc);
1747:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #else
1748:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
 2243              		.loc 1 1748 5
 2244 00e2 7B68     		ldr	r3, [r7, #4]
 2245 00e4 1800     		movs	r0, r3
 2246 00e6 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
1749:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1750:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1751:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear ADC Analog watchdog flag */
1752:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 71


 2247              		.loc 1 1752 5
 2248 00ea 7B68     		ldr	r3, [r7, #4]
 2249 00ec 1B68     		ldr	r3, [r3]
 2250 00ee 8022     		movs	r2, #128
 2251 00f0 1A60     		str	r2, [r3]
 2252              	.L110:
1753:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1754:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1755:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1756:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1757:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
1758:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 2253              		.loc 1 1758 16
 2254 00f2 FB68     		ldr	r3, [r7, #12]
 2255 00f4 1022     		movs	r2, #16
 2256 00f6 1340     		ands	r3, r2
 2257              		.loc 1 1758 5
 2258 00f8 20D0     		beq	.L114
 2259              		.loc 1 1758 62 discriminator 1
 2260 00fa BB68     		ldr	r3, [r7, #8]
 2261 00fc 1022     		movs	r2, #16
 2262 00fe 1340     		ands	r3, r2
 2263              		.loc 1 1758 49 discriminator 1
 2264 0100 1CD0     		beq	.L114
1759:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1760:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
1761:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
1762:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
1763:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* overrun ")                                                             */
1764:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
1765:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* error.                                                                 */
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 2265              		.loc 1 1766 20
 2266 0102 7B68     		ldr	r3, [r7, #4]
 2267 0104 9B6A     		ldr	r3, [r3, #40]
 2268              		.loc 1 1766 8
 2269 0106 012B     		cmp	r3, #1
 2270 0108 06D0     		beq	.L112
1767:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2271              		.loc 1 1767 9 discriminator 1
 2272 010a 7B68     		ldr	r3, [r7, #4]
 2273 010c 1B68     		ldr	r3, [r3]
 2274 010e DB68     		ldr	r3, [r3, #12]
 2275 0110 0122     		movs	r2, #1
 2276 0112 1340     		ands	r3, r2
1766:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 2277              		.loc 1 1766 67 discriminator 1
 2278 0114 012B     		cmp	r3, #1
 2279 0116 0DD1     		bne	.L113
 2280              	.L112:
1768:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1769:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to overrun */
1770:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 2281              		.loc 1 1770 7
 2282 0118 7B68     		ldr	r3, [r7, #4]
 2283 011a DB6B     		ldr	r3, [r3, #60]
 2284 011c 0222     		movs	r2, #2
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 72


 2285 011e 1A43     		orrs	r2, r3
 2286 0120 7B68     		ldr	r3, [r7, #4]
 2287 0122 DA63     		str	r2, [r3, #60]
1771:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1772:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Clear ADC overrun flag */
1773:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 2288              		.loc 1 1773 7
 2289 0124 7B68     		ldr	r3, [r7, #4]
 2290 0126 1B68     		ldr	r3, [r3]
 2291 0128 1022     		movs	r2, #16
 2292 012a 1A60     		str	r2, [r3]
1774:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1775:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1776:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
1777:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #else
1778:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
 2293              		.loc 1 1778 7
 2294 012c 7B68     		ldr	r3, [r7, #4]
 2295 012e 1800     		movs	r0, r3
 2296 0130 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2297              	.L113:
1779:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1780:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1781:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1782:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the Overrun flag */
1783:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 2298              		.loc 1 1783 5
 2299 0134 7B68     		ldr	r3, [r7, #4]
 2300 0136 1B68     		ldr	r3, [r3]
 2301 0138 1022     		movs	r2, #16
 2302 013a 1A60     		str	r2, [r3]
 2303              	.L114:
1784:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1785:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1786:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2304              		.loc 1 1786 1
 2305 013c C046     		nop
 2306 013e BD46     		mov	sp, r7
 2307 0140 04B0     		add	sp, sp, #16
 2308              		@ sp needed
 2309 0142 80BD     		pop	{r7, pc}
 2310              	.L116:
 2311              		.align	2
 2312              	.L115:
 2313 0144 FEFEFFFF 		.word	-258
 2314              		.cfi_endproc
 2315              	.LFE53:
 2317              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 2318              		.align	1
 2319              		.weak	HAL_ADC_ConvCpltCallback
 2320              		.syntax unified
 2321              		.code	16
 2322              		.thumb_func
 2324              	HAL_ADC_ConvCpltCallback:
 2325              	.LFB54:
1787:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1788:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 73


1789:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1790:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1791:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1792:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1793:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1794:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1795:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2326              		.loc 1 1795 1
 2327              		.cfi_startproc
 2328              		@ args = 0, pretend = 0, frame = 8
 2329              		@ frame_needed = 1, uses_anonymous_args = 0
 2330 0000 80B5     		push	{r7, lr}
 2331              	.LCFI42:
 2332              		.cfi_def_cfa_offset 8
 2333              		.cfi_offset 7, -8
 2334              		.cfi_offset 14, -4
 2335 0002 82B0     		sub	sp, sp, #8
 2336              	.LCFI43:
 2337              		.cfi_def_cfa_offset 16
 2338 0004 00AF     		add	r7, sp, #0
 2339              	.LCFI44:
 2340              		.cfi_def_cfa_register 7
 2341 0006 7860     		str	r0, [r7, #4]
1796:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1797:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1798:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1799:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1800:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1801:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    */
1802:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2342              		.loc 1 1802 1
 2343 0008 C046     		nop
 2344 000a BD46     		mov	sp, r7
 2345 000c 02B0     		add	sp, sp, #8
 2346              		@ sp needed
 2347 000e 80BD     		pop	{r7, pc}
 2348              		.cfi_endproc
 2349              	.LFE54:
 2351              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2352              		.align	1
 2353              		.weak	HAL_ADC_ConvHalfCpltCallback
 2354              		.syntax unified
 2355              		.code	16
 2356              		.thumb_func
 2358              	HAL_ADC_ConvHalfCpltCallback:
 2359              	.LFB55:
1803:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1804:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1805:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1806:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1807:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1808:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1809:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1810:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2360              		.loc 1 1810 1
 2361              		.cfi_startproc
 2362              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 74


 2363              		@ frame_needed = 1, uses_anonymous_args = 0
 2364 0000 80B5     		push	{r7, lr}
 2365              	.LCFI45:
 2366              		.cfi_def_cfa_offset 8
 2367              		.cfi_offset 7, -8
 2368              		.cfi_offset 14, -4
 2369 0002 82B0     		sub	sp, sp, #8
 2370              	.LCFI46:
 2371              		.cfi_def_cfa_offset 16
 2372 0004 00AF     		add	r7, sp, #0
 2373              	.LCFI47:
 2374              		.cfi_def_cfa_register 7
 2375 0006 7860     		str	r0, [r7, #4]
1811:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1812:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1813:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1814:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1815:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1816:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1817:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2376              		.loc 1 1817 1
 2377 0008 C046     		nop
 2378 000a BD46     		mov	sp, r7
 2379 000c 02B0     		add	sp, sp, #8
 2380              		@ sp needed
 2381 000e 80BD     		pop	{r7, pc}
 2382              		.cfi_endproc
 2383              	.LFE55:
 2385              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2386              		.align	1
 2387              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2388              		.syntax unified
 2389              		.code	16
 2390              		.thumb_func
 2392              	HAL_ADC_LevelOutOfWindowCallback:
 2393              	.LFB56:
1818:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1819:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1820:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1821:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1822:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1823:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1824:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1825:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2394              		.loc 1 1825 1
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 8
 2397              		@ frame_needed = 1, uses_anonymous_args = 0
 2398 0000 80B5     		push	{r7, lr}
 2399              	.LCFI48:
 2400              		.cfi_def_cfa_offset 8
 2401              		.cfi_offset 7, -8
 2402              		.cfi_offset 14, -4
 2403 0002 82B0     		sub	sp, sp, #8
 2404              	.LCFI49:
 2405              		.cfi_def_cfa_offset 16
 2406 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 75


 2407              	.LCFI50:
 2408              		.cfi_def_cfa_register 7
 2409 0006 7860     		str	r0, [r7, #4]
1826:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1827:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1828:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1829:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1830:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
1831:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1832:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2410              		.loc 1 1832 1
 2411 0008 C046     		nop
 2412 000a BD46     		mov	sp, r7
 2413 000c 02B0     		add	sp, sp, #8
 2414              		@ sp needed
 2415 000e 80BD     		pop	{r7, pc}
 2416              		.cfi_endproc
 2417              	.LFE56:
 2419              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2420              		.align	1
 2421              		.weak	HAL_ADC_ErrorCallback
 2422              		.syntax unified
 2423              		.code	16
 2424              		.thumb_func
 2426              	HAL_ADC_ErrorCallback:
 2427              	.LFB57:
1833:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1834:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1835:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1836:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1837:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1838:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
1839:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1840:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1841:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2428              		.loc 1 1841 1
 2429              		.cfi_startproc
 2430              		@ args = 0, pretend = 0, frame = 8
 2431              		@ frame_needed = 1, uses_anonymous_args = 0
 2432 0000 80B5     		push	{r7, lr}
 2433              	.LCFI51:
 2434              		.cfi_def_cfa_offset 8
 2435              		.cfi_offset 7, -8
 2436              		.cfi_offset 14, -4
 2437 0002 82B0     		sub	sp, sp, #8
 2438              	.LCFI52:
 2439              		.cfi_def_cfa_offset 16
 2440 0004 00AF     		add	r7, sp, #0
 2441              	.LCFI53:
 2442              		.cfi_def_cfa_register 7
 2443 0006 7860     		str	r0, [r7, #4]
1842:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1843:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   UNUSED(hadc);
1844:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1845:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1846:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1847:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 76


1848:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2444              		.loc 1 1848 1
 2445 0008 C046     		nop
 2446 000a BD46     		mov	sp, r7
 2447 000c 02B0     		add	sp, sp, #8
 2448              		@ sp needed
 2449 000e 80BD     		pop	{r7, pc}
 2450              		.cfi_endproc
 2451              	.LFE57:
 2453              		.global	__aeabi_uidiv
 2454              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2455              		.align	1
 2456              		.global	HAL_ADC_ConfigChannel
 2457              		.syntax unified
 2458              		.code	16
 2459              		.thumb_func
 2461              	HAL_ADC_ConfigChannel:
 2462              	.LFB58:
1849:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1850:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1851:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1852:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
1853:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1854:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1855:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1856:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral Control functions 
1857:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
1858:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim   
1859:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
1860:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****              ##### Peripheral Control functions #####
1861:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
1862:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1863:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure channels on regular group
1864:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Configure the analog watchdog
1865:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1866:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
1867:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
1868:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1869:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1870:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
1871:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1872:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         group.
1873:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1874:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         VrefInt/Vbat/TempSensor.
1875:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Sampling time constraints must be respected (sampling time can be 
1876:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         adjusted in function of ADC clock frequency and sampling time 
1877:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         setting).
1878:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Refer to device datasheet for timings values, parameters TS_vrefint,
1879:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         TS_vbat, TS_temp (values rough order: 5us to 17us).
1880:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1881:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1882:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1883:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1884:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1885:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without resetting 
1886:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
1887:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 77


1888:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1889:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1890:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
1891:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  sConfig Structure of ADC channel for regular group.
1892:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
1893:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
1894:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1895:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2463              		.loc 1 1895 1
 2464              		.cfi_startproc
 2465              		@ args = 0, pretend = 0, frame = 16
 2466              		@ frame_needed = 1, uses_anonymous_args = 0
 2467 0000 80B5     		push	{r7, lr}
 2468              	.LCFI54:
 2469              		.cfi_def_cfa_offset 8
 2470              		.cfi_offset 7, -8
 2471              		.cfi_offset 14, -4
 2472 0002 84B0     		sub	sp, sp, #16
 2473              	.LCFI55:
 2474              		.cfi_def_cfa_offset 24
 2475 0004 00AF     		add	r7, sp, #0
 2476              	.LCFI56:
 2477              		.cfi_def_cfa_register 7
 2478 0006 7860     		str	r0, [r7, #4]
 2479 0008 3960     		str	r1, [r7]
1896:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2480              		.loc 1 1896 21
 2481 000a 0F23     		movs	r3, #15
 2482 000c FB18     		adds	r3, r7, r3
 2483 000e 0022     		movs	r2, #0
 2484 0010 1A70     		strb	r2, [r3]
1897:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2485              		.loc 1 1897 17
 2486 0012 0023     		movs	r3, #0
 2487 0014 BB60     		str	r3, [r7, #8]
1898:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
1899:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
1900:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1901:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1902:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANK(sConfig->Rank));
1903:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1904:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 2488              		.loc 1 1904 9
 2489 0016 7B68     		ldr	r3, [r7, #4]
 2490 0018 DA6A     		ldr	r2, [r3, #44]
 2491              		.loc 1 1904 6
 2492 001a 8023     		movs	r3, #128
 2493 001c 5B05     		lsls	r3, r3, #21
 2494 001e 9A42     		cmp	r2, r3
 2495 0020 11D0     		beq	.L122
 2496              		.loc 1 1904 9 discriminator 1
 2497 0022 7B68     		ldr	r3, [r7, #4]
 2498 0024 DB6A     		ldr	r3, [r3, #44]
 2499 0026 012B     		cmp	r3, #1
 2500 0028 0DD0     		beq	.L122
 2501              		.loc 1 1904 9 is_stmt 0 discriminator 2
 2502 002a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 78


 2503 002c DB6A     		ldr	r3, [r3, #44]
 2504 002e 022B     		cmp	r3, #2
 2505 0030 09D0     		beq	.L122
 2506              		.loc 1 1904 9 discriminator 3
 2507 0032 7B68     		ldr	r3, [r7, #4]
 2508 0034 DB6A     		ldr	r3, [r3, #44]
 2509 0036 032B     		cmp	r3, #3
 2510 0038 05D0     		beq	.L122
 2511              		.loc 1 1904 9 discriminator 4
 2512 003a 7B68     		ldr	r3, [r7, #4]
 2513 003c DB6A     		ldr	r3, [r3, #44]
 2514 003e 042B     		cmp	r3, #4
 2515 0040 01D0     		beq	.L122
 2516              		.loc 1 1904 9 discriminator 5
 2517 0042 7B68     		ldr	r3, [r7, #4]
 2518 0044 DB6A     		ldr	r3, [r3, #44]
 2519              	.L122:
1905:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1906:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1907:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1908:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1909:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
1910:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2520              		.loc 1 1910 3 is_stmt 1
 2521 0046 7B68     		ldr	r3, [r7, #4]
 2522 0048 3422     		movs	r2, #52
 2523 004a 9B5C     		ldrb	r3, [r3, r2]
 2524 004c 012B     		cmp	r3, #1
 2525 004e 01D1     		bne	.L123
 2526              		.loc 1 1910 3 is_stmt 0 discriminator 1
 2527 0050 0223     		movs	r3, #2
 2528 0052 D0E0     		b	.L124
 2529              	.L123:
 2530              		.loc 1 1910 3 discriminator 2
 2531 0054 7B68     		ldr	r3, [r7, #4]
 2532 0056 3422     		movs	r2, #52
 2533 0058 0121     		movs	r1, #1
 2534 005a 9954     		strb	r1, [r3, r2]
1911:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
1912:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
1913:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1914:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
1915:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel number                                                        */
1916:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Channel sampling time                                                 */
1917:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
1918:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 2535              		.loc 1 1918 7 is_stmt 1 discriminator 2
 2536 005c 7B68     		ldr	r3, [r7, #4]
 2537 005e 1B68     		ldr	r3, [r3]
 2538 0060 9B68     		ldr	r3, [r3, #8]
 2539 0062 0422     		movs	r2, #4
 2540 0064 1340     		ands	r3, r2
 2541              		.loc 1 1918 6 discriminator 2
 2542 0066 00D0     		beq	.LCB2160
 2543 0068 B4E0     		b	.L125	@long jump
 2544              	.LCB2160:
1919:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 79


1920:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure channel: depending on rank setting, add it or remove it from */
1921:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* ADC conversion sequencer.                                              */
1922:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (sConfig->Rank != ADC_RANK_NONE)
 2545              		.loc 1 1922 16
 2546 006a 3B68     		ldr	r3, [r7]
 2547 006c 5B68     		ldr	r3, [r3, #4]
 2548              		.loc 1 1922 8
 2549 006e 644A     		ldr	r2, .L141
 2550 0070 9342     		cmp	r3, r2
 2551 0072 00D1     		bne	.LCB2165
 2552 0074 82E0     		b	.L126	@long jump
 2553              	.LCB2165:
1923:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1924:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1925:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set the channel selection register from the selected channel */
1926:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 2554              		.loc 1 1926 11
 2555 0076 7B68     		ldr	r3, [r7, #4]
 2556 0078 1B68     		ldr	r3, [r3]
 2557              		.loc 1 1926 30
 2558 007a 996A     		ldr	r1, [r3, #40]
 2559              		.loc 1 1926 33
 2560 007c 3B68     		ldr	r3, [r7]
 2561 007e 1B68     		ldr	r3, [r3]
 2562 0080 0122     		movs	r2, #1
 2563 0082 9A40     		lsls	r2, r2, r3
 2564              		.loc 1 1926 11
 2565 0084 7B68     		ldr	r3, [r7, #4]
 2566 0086 1B68     		ldr	r3, [r3]
 2567              		.loc 1 1926 30
 2568 0088 0A43     		orrs	r2, r1
 2569 008a 9A62     		str	r2, [r3, #40]
1927:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1928:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Channel sampling time configuration */
1929:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
1930:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* (obsolete): sampling time set in this function with                  */
1931:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* parameter "SamplingTime" (obsolete) only if not already set into     */
1932:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* ADC initialization structure with parameter "SamplingTimeCommon".    */
1933:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 2570              		.loc 1 1933 13
 2571 008c 7B68     		ldr	r3, [r7, #4]
 2572 008e DA6A     		ldr	r2, [r3, #44]
 2573              		.loc 1 1933 10
 2574 0090 8023     		movs	r3, #128
 2575 0092 5B05     		lsls	r3, r3, #21
 2576 0094 9A42     		cmp	r2, r3
 2577 0096 37D0     		beq	.L127
 2578              		.loc 1 1933 13 discriminator 1
 2579 0098 7B68     		ldr	r3, [r7, #4]
 2580 009a DB6A     		ldr	r3, [r3, #44]
 2581 009c 012B     		cmp	r3, #1
 2582 009e 33D0     		beq	.L127
 2583              		.loc 1 1933 13 is_stmt 0 discriminator 2
 2584 00a0 7B68     		ldr	r3, [r7, #4]
 2585 00a2 DB6A     		ldr	r3, [r3, #44]
 2586 00a4 022B     		cmp	r3, #2
 2587 00a6 2FD0     		beq	.L127
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 80


 2588              		.loc 1 1933 13 discriminator 3
 2589 00a8 7B68     		ldr	r3, [r7, #4]
 2590 00aa DB6A     		ldr	r3, [r3, #44]
 2591 00ac 032B     		cmp	r3, #3
 2592 00ae 2BD0     		beq	.L127
 2593              		.loc 1 1933 13 discriminator 4
 2594 00b0 7B68     		ldr	r3, [r7, #4]
 2595 00b2 DB6A     		ldr	r3, [r3, #44]
 2596 00b4 042B     		cmp	r3, #4
 2597 00b6 27D0     		beq	.L127
 2598              		.loc 1 1933 13 discriminator 5
 2599 00b8 7B68     		ldr	r3, [r7, #4]
 2600 00ba DB6A     		ldr	r3, [r3, #44]
 2601 00bc 052B     		cmp	r3, #5
 2602 00be 23D0     		beq	.L127
 2603              		.loc 1 1933 13 discriminator 6
 2604 00c0 7B68     		ldr	r3, [r7, #4]
 2605 00c2 DB6A     		ldr	r3, [r3, #44]
 2606 00c4 062B     		cmp	r3, #6
 2607 00c6 1FD0     		beq	.L127
 2608              		.loc 1 1933 13 discriminator 7
 2609 00c8 7B68     		ldr	r3, [r7, #4]
 2610 00ca DB6A     		ldr	r3, [r3, #44]
 2611              		.loc 1 1933 11 is_stmt 1 discriminator 7
 2612 00cc 072B     		cmp	r3, #7
 2613 00ce 1BD0     		beq	.L127
1934:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1935:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Modify sampling time if needed (not needed in case of recurrence */
1936:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* for several channels programmed consecutively into the sequencer)  */
1937:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 2614              		.loc 1 1937 20
 2615 00d0 3B68     		ldr	r3, [r7]
 2616 00d2 9A68     		ldr	r2, [r3, #8]
 2617              		.loc 1 1937 38
 2618 00d4 7B68     		ldr	r3, [r7, #4]
 2619 00d6 1B68     		ldr	r3, [r3]
 2620 00d8 5B69     		ldr	r3, [r3, #20]
 2621 00da 0721     		movs	r1, #7
 2622 00dc 0B40     		ands	r3, r1
 2623              		.loc 1 1937 12
 2624 00de 9A42     		cmp	r2, r3
 2625 00e0 12D0     		beq	.L127
1938:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1939:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Channel sampling time configuration */
1940:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Clear the old sample time */
1941:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 2626              		.loc 1 1941 15
 2627 00e2 7B68     		ldr	r3, [r7, #4]
 2628 00e4 1B68     		ldr	r3, [r3]
 2629              		.loc 1 1941 32
 2630 00e6 5A69     		ldr	r2, [r3, #20]
 2631              		.loc 1 1941 15
 2632 00e8 7B68     		ldr	r3, [r7, #4]
 2633 00ea 1B68     		ldr	r3, [r3]
 2634              		.loc 1 1941 32
 2635 00ec 0721     		movs	r1, #7
 2636 00ee 8A43     		bics	r2, r1
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 81


 2637 00f0 5A61     		str	r2, [r3, #20]
1942:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
1943:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set the new sample time */
1944:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 2638              		.loc 1 1944 15
 2639 00f2 7B68     		ldr	r3, [r7, #4]
 2640 00f4 1B68     		ldr	r3, [r3]
 2641              		.loc 1 1944 32
 2642 00f6 5969     		ldr	r1, [r3, #20]
 2643              		.loc 1 1944 35
 2644 00f8 3B68     		ldr	r3, [r7]
 2645 00fa 9B68     		ldr	r3, [r3, #8]
 2646 00fc 0722     		movs	r2, #7
 2647 00fe 1A40     		ands	r2, r3
 2648              		.loc 1 1944 15
 2649 0100 7B68     		ldr	r3, [r7, #4]
 2650 0102 1B68     		ldr	r3, [r3]
 2651              		.loc 1 1944 32
 2652 0104 0A43     		orrs	r2, r1
 2653 0106 5A61     		str	r2, [r3, #20]
 2654              	.L127:
1945:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1946:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1947:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1948:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1949:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths enable: If internal channel selected,     */
1950:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* enable dedicated internal buffers and path.                          */
1951:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using         */
1952:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
1953:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /*       channel configuration parameter "Rank".                        */
1954:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 2655              		.loc 1 1954 10
 2656 0108 3B68     		ldr	r3, [r7]
 2657 010a 1B68     		ldr	r3, [r3]
 2658              		.loc 1 1954 9
 2659 010c 102B     		cmp	r3, #16
 2660 010e 07D0     		beq	.L128
 2661              		.loc 1 1954 10 discriminator 1
 2662 0110 3B68     		ldr	r3, [r7]
 2663 0112 1B68     		ldr	r3, [r3]
 2664 0114 112B     		cmp	r3, #17
 2665 0116 03D0     		beq	.L128
 2666              		.loc 1 1954 10 is_stmt 0 discriminator 2
 2667 0118 3B68     		ldr	r3, [r7]
 2668 011a 1B68     		ldr	r3, [r3]
 2669 011c 122B     		cmp	r3, #18
 2670 011e 63D1     		bne	.L129
 2671              	.L128:
1955:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1956:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, enable Temp. sensor measurement path. */
1957:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, enable VREFINT measurement path. */
1958:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, enable VBAT measurement path. */
1959:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 2672              		.loc 1 1959 18 is_stmt 1
 2673 0120 384B     		ldr	r3, .L141+4
 2674 0122 1968     		ldr	r1, [r3]
 2675              		.loc 1 1959 21
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 82


 2676 0124 3B68     		ldr	r3, [r7]
 2677 0126 1B68     		ldr	r3, [r3]
 2678 0128 102B     		cmp	r3, #16
 2679 012a 09D0     		beq	.L130
 2680              		.loc 1 1959 21 is_stmt 0 discriminator 1
 2681 012c 3B68     		ldr	r3, [r7]
 2682 012e 1B68     		ldr	r3, [r3]
 2683 0130 112B     		cmp	r3, #17
 2684 0132 02D1     		bne	.L131
 2685              		.loc 1 1959 21 discriminator 3
 2686 0134 8023     		movs	r3, #128
 2687 0136 DB03     		lsls	r3, r3, #15
 2688 0138 04E0     		b	.L133
 2689              	.L131:
 2690              		.loc 1 1959 21 discriminator 4
 2691 013a 8023     		movs	r3, #128
 2692 013c 5B04     		lsls	r3, r3, #17
 2693 013e 01E0     		b	.L133
 2694              	.L130:
 2695              		.loc 1 1959 21 discriminator 2
 2696 0140 8023     		movs	r3, #128
 2697 0142 1B04     		lsls	r3, r3, #16
 2698              	.L133:
 2699              		.loc 1 1959 18 is_stmt 1 discriminator 8
 2700 0144 2F4A     		ldr	r2, .L141+4
 2701 0146 0B43     		orrs	r3, r1
 2702 0148 1360     		str	r3, [r2]
1960:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         
1961:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Temp. sensor is selected, wait for stabilization delay */
1962:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 2703              		.loc 1 1962 20 discriminator 8
 2704 014a 3B68     		ldr	r3, [r7]
 2705 014c 1B68     		ldr	r3, [r3]
 2706              		.loc 1 1962 12 discriminator 8
 2707 014e 102B     		cmp	r3, #16
 2708 0150 4AD1     		bne	.L129
1963:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
1964:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
1965:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
1966:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 2709              		.loc 1 1966 73
 2710 0152 2D4B     		ldr	r3, .L141+8
 2711 0154 1B68     		ldr	r3, [r3]
 2712 0156 2D49     		ldr	r1, .L141+12
 2713 0158 1800     		movs	r0, r3
 2714 015a FFF7FEFF 		bl	__aeabi_uidiv
 2715 015e 0300     		movs	r3, r0
 2716 0160 1A00     		movs	r2, r3
 2717              		.loc 1 1966 54
 2718 0162 1300     		movs	r3, r2
 2719 0164 9B00     		lsls	r3, r3, #2
 2720 0166 9B18     		adds	r3, r3, r2
 2721 0168 5B00     		lsls	r3, r3, #1
 2722              		.loc 1 1966 27
 2723 016a BB60     		str	r3, [r7, #8]
1967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2724              		.loc 1 1967 16
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 83


 2725 016c 02E0     		b	.L134
 2726              	.L135:
1968:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           {
1969:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             wait_loop_index--;
 2727              		.loc 1 1969 28
 2728 016e BB68     		ldr	r3, [r7, #8]
 2729 0170 013B     		subs	r3, r3, #1
 2730 0172 BB60     		str	r3, [r7, #8]
 2731              	.L134:
1967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2732              		.loc 1 1967 33
 2733 0174 BB68     		ldr	r3, [r7, #8]
1967:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2734              		.loc 1 1967 16
 2735 0176 002B     		cmp	r3, #0
 2736 0178 F9D1     		bne	.L135
 2737 017a 35E0     		b	.L129
 2738              	.L126:
1970:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           }
1971:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
1972:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1973:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1974:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
1975:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
1976:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Regular sequence configuration */
1977:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Reset the channel selection register from the selected channel */
1978:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 2739              		.loc 1 1978 11
 2740 017c 7B68     		ldr	r3, [r7, #4]
 2741 017e 1B68     		ldr	r3, [r3]
 2742              		.loc 1 1978 30
 2743 0180 9A6A     		ldr	r2, [r3, #40]
 2744              		.loc 1 1978 34
 2745 0182 3B68     		ldr	r3, [r7]
 2746 0184 1B68     		ldr	r3, [r3]
 2747 0186 0121     		movs	r1, #1
 2748 0188 9940     		lsls	r1, r1, r3
 2749 018a 0B00     		movs	r3, r1
 2750              		.loc 1 1978 33
 2751 018c D943     		mvns	r1, r3
 2752              		.loc 1 1978 11
 2753 018e 7B68     		ldr	r3, [r7, #4]
 2754 0190 1B68     		ldr	r3, [r3]
 2755              		.loc 1 1978 30
 2756 0192 0A40     		ands	r2, r1
 2757 0194 9A62     		str	r2, [r3, #40]
1979:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
1980:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
1981:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* internal measurement paths disable: If internal channel selected,    */
1982:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* disable dedicated internal buffers and path.                         */
1983:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 2758              		.loc 1 1983 10
 2759 0196 3B68     		ldr	r3, [r7]
 2760 0198 1B68     		ldr	r3, [r3]
 2761              		.loc 1 1983 9
 2762 019a 102B     		cmp	r3, #16
 2763 019c 07D0     		beq	.L136
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 84


 2764              		.loc 1 1983 10 discriminator 1
 2765 019e 3B68     		ldr	r3, [r7]
 2766 01a0 1B68     		ldr	r3, [r3]
 2767 01a2 112B     		cmp	r3, #17
 2768 01a4 03D0     		beq	.L136
 2769              		.loc 1 1983 10 is_stmt 0 discriminator 2
 2770 01a6 3B68     		ldr	r3, [r7]
 2771 01a8 1B68     		ldr	r3, [r3]
 2772 01aa 122B     		cmp	r3, #18
 2773 01ac 1CD1     		bne	.L129
 2774              	.L136:
1984:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
1985:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_16 is selected, disable Temp. sensor measurement path. */
1986:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_17 is selected, disable VREFINT measurement path. */
1987:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* If Channel_18 is selected, disable VBAT measurement path. */
1988:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 2775              		.loc 1 1988 18 is_stmt 1
 2776 01ae 154B     		ldr	r3, .L141+4
 2777 01b0 1968     		ldr	r1, [r3]
 2778              		.loc 1 1988 22
 2779 01b2 3B68     		ldr	r3, [r7]
 2780 01b4 1B68     		ldr	r3, [r3]
 2781              		.loc 1 1988 21
 2782 01b6 102B     		cmp	r3, #16
 2783 01b8 07D0     		beq	.L137
 2784              		.loc 1 1988 22 discriminator 1
 2785 01ba 3B68     		ldr	r3, [r7]
 2786 01bc 1B68     		ldr	r3, [r3]
 2787              		.loc 1 1988 21 discriminator 1
 2788 01be 112B     		cmp	r3, #17
 2789 01c0 01D1     		bne	.L138
 2790              		.loc 1 1988 21 is_stmt 0 discriminator 3
 2791 01c2 134B     		ldr	r3, .L141+16
 2792 01c4 02E0     		b	.L140
 2793              	.L138:
 2794              		.loc 1 1988 21 discriminator 4
 2795 01c6 134B     		ldr	r3, .L141+20
 2796 01c8 00E0     		b	.L140
 2797              	.L137:
 2798              		.loc 1 1988 21 discriminator 2
 2799 01ca 134B     		ldr	r3, .L141+24
 2800              	.L140:
 2801              		.loc 1 1988 18 is_stmt 1 discriminator 8
 2802 01cc 0D4A     		ldr	r2, .L141+4
 2803 01ce 0B40     		ands	r3, r1
 2804 01d0 1360     		str	r3, [r2]
 2805 01d2 09E0     		b	.L129
 2806              	.L125:
1989:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
1990:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
1991:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
1992:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
1993:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
1994:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
1995:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
1996:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* parameters.                                                              */
1997:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 85


1998:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
1999:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
2000:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2807              		.loc 1 2000 5
 2808 01d4 7B68     		ldr	r3, [r7, #4]
 2809 01d6 9B6B     		ldr	r3, [r3, #56]
 2810 01d8 2022     		movs	r2, #32
 2811 01da 1A43     		orrs	r2, r3
 2812 01dc 7B68     		ldr	r3, [r7, #4]
 2813 01de 9A63     		str	r2, [r3, #56]
2001:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2002:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 2814              		.loc 1 2002 20
 2815 01e0 0F23     		movs	r3, #15
 2816 01e2 FB18     		adds	r3, r7, r3
 2817 01e4 0122     		movs	r2, #1
 2818 01e6 1A70     		strb	r2, [r3]
 2819              	.L129:
2003:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2004:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2005:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
2006:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2820              		.loc 1 2006 3
 2821 01e8 7B68     		ldr	r3, [r7, #4]
 2822 01ea 3422     		movs	r2, #52
 2823 01ec 0021     		movs	r1, #0
 2824 01ee 9954     		strb	r1, [r3, r2]
2007:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2008:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
2009:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 2825              		.loc 1 2009 10
 2826 01f0 0F23     		movs	r3, #15
 2827 01f2 FB18     		adds	r3, r7, r3
 2828 01f4 1B78     		ldrb	r3, [r3]
 2829              	.L124:
2010:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 2830              		.loc 1 2010 1
 2831 01f6 1800     		movs	r0, r3
 2832 01f8 BD46     		mov	sp, r7
 2833 01fa 04B0     		add	sp, sp, #16
 2834              		@ sp needed
 2835 01fc 80BD     		pop	{r7, pc}
 2836              	.L142:
 2837 01fe C046     		.align	2
 2838              	.L141:
 2839 0200 01100000 		.word	4097
 2840 0204 08270140 		.word	1073817352
 2841 0208 00000000 		.word	SystemCoreClock
 2842 020c 40420F00 		.word	1000000
 2843 0210 FFFFBFFF 		.word	-4194305
 2844 0214 FFFFFFFE 		.word	-16777217
 2845 0218 FFFF7FFF 		.word	-8388609
 2846              		.cfi_endproc
 2847              	.LFE58:
 2849              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2850              		.align	1
 2851              		.global	HAL_ADC_AnalogWDGConfig
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 86


 2852              		.syntax unified
 2853              		.code	16
 2854              		.thumb_func
 2856              	HAL_ADC_AnalogWDGConfig:
 2857              	.LFB59:
2011:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2012:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2013:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2014:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
2015:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2016:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, following  
2017:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
2018:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting 
2019:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         the ADC.
2020:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
2021:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
2022:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
2023:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
2024:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
2025:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status
2026:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2027:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
2028:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 2858              		.loc 1 2028 1
 2859              		.cfi_startproc
 2860              		@ args = 0, pretend = 0, frame = 24
 2861              		@ frame_needed = 1, uses_anonymous_args = 0
 2862 0000 80B5     		push	{r7, lr}
 2863              	.LCFI57:
 2864              		.cfi_def_cfa_offset 8
 2865              		.cfi_offset 7, -8
 2866              		.cfi_offset 14, -4
 2867 0002 86B0     		sub	sp, sp, #24
 2868              	.LCFI58:
 2869              		.cfi_def_cfa_offset 32
 2870 0004 00AF     		add	r7, sp, #0
 2871              	.LCFI59:
 2872              		.cfi_def_cfa_register 7
 2873 0006 7860     		str	r0, [r7, #4]
 2874 0008 3960     		str	r1, [r7]
2029:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2875              		.loc 1 2029 21
 2876 000a 1723     		movs	r3, #23
 2877 000c FB18     		adds	r3, r7, r3
 2878 000e 0022     		movs	r2, #0
 2879 0010 1A70     		strb	r2, [r3]
2030:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2031:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
2032:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
2033:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2034:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
2035:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2036:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2037:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
2038:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2039:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verify if threshold is within the selected ADC resolution */
2040:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 87


2041:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
2042:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2043:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if(AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
2044:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2045:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
2046:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2047:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2048:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process locked */
2049:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2880              		.loc 1 2049 3
 2881 0012 7B68     		ldr	r3, [r7, #4]
 2882 0014 3422     		movs	r2, #52
 2883 0016 9B5C     		ldrb	r3, [r3, r2]
 2884 0018 012B     		cmp	r3, #1
 2885 001a 01D1     		bne	.L144
 2886              		.loc 1 2049 3 is_stmt 0 discriminator 1
 2887 001c 0223     		movs	r3, #2
 2888 001e 74E0     		b	.L145
 2889              	.L144:
 2890              		.loc 1 2049 3 discriminator 2
 2891 0020 7B68     		ldr	r3, [r7, #4]
 2892 0022 3422     		movs	r2, #52
 2893 0024 0121     		movs	r1, #1
 2894 0026 9954     		strb	r1, [r3, r2]
2050:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2051:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2052:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2053:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
2054:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
2055:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
2056:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 2895              		.loc 1 2056 7 is_stmt 1 discriminator 2
 2896 0028 7B68     		ldr	r3, [r7, #4]
 2897 002a 1B68     		ldr	r3, [r3]
 2898 002c 9B68     		ldr	r3, [r3, #8]
 2899 002e 0422     		movs	r2, #4
 2900 0030 1340     		ands	r3, r2
 2901              		.loc 1 2056 6 discriminator 2
 2902 0032 59D1     		bne	.L146
2057:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2058:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configuration of analog watchdog:                                      */
2059:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the analog watchdog enable mode: one or overall group of        */
2060:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    channels.                                                           */
2061:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*  - Set the Analog watchdog channel (is not used if watchdog            */
2062:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                           */
2063:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
 2903              		.loc 1 2063 9
 2904 0034 7B68     		ldr	r3, [r7, #4]
 2905 0036 1B68     		ldr	r3, [r3]
 2906              		.loc 1 2063 27
 2907 0038 DA68     		ldr	r2, [r3, #12]
 2908              		.loc 1 2063 9
 2909 003a 7B68     		ldr	r3, [r7, #4]
 2910 003c 1B68     		ldr	r3, [r3]
 2911              		.loc 1 2063 27
 2912 003e 3549     		ldr	r1, .L149
 2913 0040 0A40     		ands	r2, r1
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 88


 2914 0042 DA60     		str	r2, [r3, #12]
2064:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDEN  |
2065:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                 ADC_CFGR1_AWDCH   );
2066:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 2915              		.loc 1 2067 9
 2916 0044 7B68     		ldr	r3, [r7, #4]
 2917 0046 1B68     		ldr	r3, [r3]
 2918              		.loc 1 2067 27
 2919 0048 D968     		ldr	r1, [r3, #12]
 2920              		.loc 1 2067 47
 2921 004a 3B68     		ldr	r3, [r7]
 2922 004c 1A68     		ldr	r2, [r3]
2068:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2923              		.loc 1 2068 32
 2924 004e 3B68     		ldr	r3, [r7]
 2925 0050 5B68     		ldr	r3, [r3, #4]
 2926 0052 9B06     		lsls	r3, r3, #26
2067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2927              		.loc 1 2067 73
 2928 0054 1A43     		orrs	r2, r3
2067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2929              		.loc 1 2067 9
 2930 0056 7B68     		ldr	r3, [r7, #4]
 2931 0058 1B68     		ldr	r3, [r3]
2067:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                                ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 2932              		.loc 1 2067 27
 2933 005a 0A43     		orrs	r2, r1
 2934 005c DA60     		str	r2, [r3, #12]
2069:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2070:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Shift the offset in function of the selected ADC resolution: Thresholds*/
2071:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0   */
2072:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
 2935              		.loc 1 2072 34
 2936 005e 3B68     		ldr	r3, [r7]
 2937 0060 DA68     		ldr	r2, [r3, #12]
 2938 0062 7B68     		ldr	r3, [r7, #4]
 2939 0064 1B68     		ldr	r3, [r3]
 2940 0066 DB68     		ldr	r3, [r3, #12]
 2941 0068 DB08     		lsrs	r3, r3, #3
 2942 006a 0321     		movs	r1, #3
 2943 006c 0B40     		ands	r3, r1
 2944 006e 5B00     		lsls	r3, r3, #1
 2945              		.loc 1 2072 32
 2946 0070 9A40     		lsls	r2, r2, r3
 2947 0072 1300     		movs	r3, r2
 2948 0074 3B61     		str	r3, [r7, #16]
2073:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 2949              		.loc 1 2073 34
 2950 0076 3B68     		ldr	r3, [r7]
 2951 0078 1A69     		ldr	r2, [r3, #16]
 2952 007a 7B68     		ldr	r3, [r7, #4]
 2953 007c 1B68     		ldr	r3, [r3]
 2954 007e DB68     		ldr	r3, [r3, #12]
 2955 0080 DB08     		lsrs	r3, r3, #3
 2956 0082 0321     		movs	r1, #3
 2957 0084 0B40     		ands	r3, r1
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 89


 2958 0086 5B00     		lsls	r3, r3, #1
 2959              		.loc 1 2073 32
 2960 0088 9A40     		lsls	r2, r2, r3
 2961 008a 1300     		movs	r3, r2
 2962 008c FB60     		str	r3, [r7, #12]
2074:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2075:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set the high and low thresholds */
2076:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 2963              		.loc 1 2076 9
 2964 008e 7B68     		ldr	r3, [r7, #4]
 2965 0090 1B68     		ldr	r3, [r3]
 2966              		.loc 1 2076 24
 2967 0092 1A6A     		ldr	r2, [r3, #32]
 2968              		.loc 1 2076 9
 2969 0094 7B68     		ldr	r3, [r7, #4]
 2970 0096 1B68     		ldr	r3, [r3]
 2971              		.loc 1 2076 24
 2972 0098 1F49     		ldr	r1, .L149+4
 2973 009a 0A40     		ands	r2, r1
 2974 009c 1A62     		str	r2, [r3, #32]
2077:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 2975              		.loc 1 2077 9
 2976 009e 7B68     		ldr	r3, [r7, #4]
 2977 00a0 1B68     		ldr	r3, [r3]
 2978              		.loc 1 2077 24
 2979 00a2 196A     		ldr	r1, [r3, #32]
 2980              		.loc 1 2077 30
 2981 00a4 3B69     		ldr	r3, [r7, #16]
 2982 00a6 1A04     		lsls	r2, r3, #16
 2983              		.loc 1 2077 81
 2984 00a8 FB68     		ldr	r3, [r7, #12]
 2985 00aa 1A43     		orrs	r2, r3
 2986              		.loc 1 2077 9
 2987 00ac 7B68     		ldr	r3, [r7, #4]
 2988 00ae 1B68     		ldr	r3, [r3]
 2989              		.loc 1 2077 24
 2990 00b0 0A43     		orrs	r2, r1
 2991 00b2 1A62     		str	r2, [r3, #32]
2078:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                              tmpAWDLowThresholdShifted                           );
2079:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2080:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Clear the ADC Analog watchdog flag (in case of left enabled by         */
2081:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler()   */
2082:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* or HAL_ADC_PollForEvent().                                             */
2083:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD);
 2992              		.loc 1 2083 5
 2993 00b4 7B68     		ldr	r3, [r7, #4]
 2994 00b6 1B68     		ldr	r3, [r3]
 2995 00b8 8022     		movs	r2, #128
 2996 00ba 1A60     		str	r2, [r3]
2084:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2085:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Configure ADC Analog watchdog interrupt */
2086:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(AnalogWDGConfig->ITMode == ENABLE)
 2997              		.loc 1 2086 23
 2998 00bc 3B68     		ldr	r3, [r7]
 2999 00be 1B7A     		ldrb	r3, [r3, #8]
 3000              		.loc 1 2086 7
 3001 00c0 012B     		cmp	r3, #1
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 90


 3002 00c2 08D1     		bne	.L147
2087:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2088:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Enable the ADC Analog watchdog interrupt */
2089:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 3003              		.loc 1 2089 7
 3004 00c4 7B68     		ldr	r3, [r7, #4]
 3005 00c6 1B68     		ldr	r3, [r3]
 3006 00c8 5A68     		ldr	r2, [r3, #4]
 3007 00ca 7B68     		ldr	r3, [r7, #4]
 3008 00cc 1B68     		ldr	r3, [r3]
 3009 00ce 8021     		movs	r1, #128
 3010 00d0 0A43     		orrs	r2, r1
 3011 00d2 5A60     		str	r2, [r3, #4]
 3012 00d4 12E0     		b	.L148
 3013              	.L147:
2090:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2091:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
2092:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2093:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC Analog watchdog interrupt */
2094:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 3014              		.loc 1 2094 7
 3015 00d6 7B68     		ldr	r3, [r7, #4]
 3016 00d8 1B68     		ldr	r3, [r3]
 3017 00da 5A68     		ldr	r2, [r3, #4]
 3018 00dc 7B68     		ldr	r3, [r7, #4]
 3019 00de 1B68     		ldr	r3, [r3]
 3020 00e0 8021     		movs	r1, #128
 3021 00e2 8A43     		bics	r2, r1
 3022 00e4 5A60     		str	r2, [r3, #4]
 3023 00e6 09E0     		b	.L148
 3024              	.L146:
2095:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2096:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2097:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2098:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update could be done    */
2099:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* on neither of the AWD configuration structure parameters.                */
2100:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
2101:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2102:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Update ADC state machine to error */
2103:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3025              		.loc 1 2103 5
 3026 00e8 7B68     		ldr	r3, [r7, #4]
 3027 00ea 9B6B     		ldr	r3, [r3, #56]
 3028 00ec 2022     		movs	r2, #32
 3029 00ee 1A43     		orrs	r2, r3
 3030 00f0 7B68     		ldr	r3, [r7, #4]
 3031 00f2 9A63     		str	r2, [r3, #56]
2104:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2105:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 3032              		.loc 1 2105 20
 3033 00f4 1723     		movs	r3, #23
 3034 00f6 FB18     		adds	r3, r7, r3
 3035 00f8 0122     		movs	r2, #1
 3036 00fa 1A70     		strb	r2, [r3]
 3037              	.L148:
2106:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2107:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 91


2108:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2109:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Process unlocked */
2110:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 3038              		.loc 1 2110 3
 3039 00fc 7B68     		ldr	r3, [r7, #4]
 3040 00fe 3422     		movs	r2, #52
 3041 0100 0021     		movs	r1, #0
 3042 0102 9954     		strb	r1, [r3, r2]
2111:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2112:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return function status */
2113:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return tmp_hal_status;
 3043              		.loc 1 2113 10
 3044 0104 1723     		movs	r3, #23
 3045 0106 FB18     		adds	r3, r7, r3
 3046 0108 1B78     		ldrb	r3, [r3]
 3047              	.L145:
2114:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3048              		.loc 1 2114 1
 3049 010a 1800     		movs	r0, r3
 3050 010c BD46     		mov	sp, r7
 3051 010e 06B0     		add	sp, sp, #24
 3052              		@ sp needed
 3053 0110 80BD     		pop	{r7, pc}
 3054              	.L150:
 3055 0112 C046     		.align	2
 3056              	.L149:
 3057 0114 FFFF3F83 		.word	-2092957697
 3058 0118 00F000F0 		.word	-268374016
 3059              		.cfi_endproc
 3060              	.LFE59:
 3062              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 3063              		.align	1
 3064              		.global	HAL_ADC_GetState
 3065              		.syntax unified
 3066              		.code	16
 3067              		.thumb_func
 3069              	HAL_ADC_GetState:
 3070              	.LFB60:
2115:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2116:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2117:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2118:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
2119:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2120:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2121:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2122:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
2123:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *  @brief    Peripheral State functions
2124:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  *
2125:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @verbatim
2126:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================
2127:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
2128:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****  ===============================================================================  
2129:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     [..]
2130:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
2131:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     peripheral.
2132:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC state
2133:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       (+) Check the ADC error code
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 92


2134:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2135:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** @endverbatim
2136:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
2137:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2138:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2139:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2140:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC state
2141:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be 
2142:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         compared with states bits.
2143:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         For example:                                                         
2144:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_REG_BUSY)) "
2145:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
2146:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
2147:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL state
2148:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2149:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
2150:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3071              		.loc 1 2150 1
 3072              		.cfi_startproc
 3073              		@ args = 0, pretend = 0, frame = 8
 3074              		@ frame_needed = 1, uses_anonymous_args = 0
 3075 0000 80B5     		push	{r7, lr}
 3076              	.LCFI60:
 3077              		.cfi_def_cfa_offset 8
 3078              		.cfi_offset 7, -8
 3079              		.cfi_offset 14, -4
 3080 0002 82B0     		sub	sp, sp, #8
 3081              	.LCFI61:
 3082              		.cfi_def_cfa_offset 16
 3083 0004 00AF     		add	r7, sp, #0
 3084              	.LCFI62:
 3085              		.cfi_def_cfa_register 7
 3086 0006 7860     		str	r0, [r7, #4]
2151:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
2152:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2153:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2154:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return ADC state */
2155:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->State;
 3087              		.loc 1 2155 14
 3088 0008 7B68     		ldr	r3, [r7, #4]
 3089 000a 9B6B     		ldr	r3, [r3, #56]
2156:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3090              		.loc 1 2156 1
 3091 000c 1800     		movs	r0, r3
 3092 000e BD46     		mov	sp, r7
 3093 0010 02B0     		add	sp, sp, #8
 3094              		@ sp needed
 3095 0012 80BD     		pop	{r7, pc}
 3096              		.cfi_endproc
 3097              	.LFE60:
 3099              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 3100              		.align	1
 3101              		.global	HAL_ADC_GetError
 3102              		.syntax unified
 3103              		.code	16
 3104              		.thumb_func
 3106              	HAL_ADC_GetError:
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 93


 3107              	.LFB61:
2157:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2158:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2159:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Return the ADC error code
2160:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
2161:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval ADC Error Code
2162:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2163:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
2164:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3108              		.loc 1 2164 1
 3109              		.cfi_startproc
 3110              		@ args = 0, pretend = 0, frame = 8
 3111              		@ frame_needed = 1, uses_anonymous_args = 0
 3112 0000 80B5     		push	{r7, lr}
 3113              	.LCFI63:
 3114              		.cfi_def_cfa_offset 8
 3115              		.cfi_offset 7, -8
 3116              		.cfi_offset 14, -4
 3117 0002 82B0     		sub	sp, sp, #8
 3118              	.LCFI64:
 3119              		.cfi_def_cfa_offset 16
 3120 0004 00AF     		add	r7, sp, #0
 3121              	.LCFI65:
 3122              		.cfi_def_cfa_register 7
 3123 0006 7860     		str	r0, [r7, #4]
2165:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return hadc->ErrorCode;
 3124              		.loc 1 2165 14
 3125 0008 7B68     		ldr	r3, [r7, #4]
 3126 000a DB6B     		ldr	r3, [r3, #60]
2166:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3127              		.loc 1 2166 1
 3128 000c 1800     		movs	r0, r3
 3129 000e BD46     		mov	sp, r7
 3130 0010 02B0     		add	sp, sp, #8
 3131              		@ sp needed
 3132 0012 80BD     		pop	{r7, pc}
 3133              		.cfi_endproc
 3134              	.LFE61:
 3136              		.section	.text.ADC_Enable,"ax",%progbits
 3137              		.align	1
 3138              		.syntax unified
 3139              		.code	16
 3140              		.thumb_func
 3142              	ADC_Enable:
 3143              	.LFB62:
2167:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2168:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2169:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
2170:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */  
2171:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2172:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2173:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @}
2174:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2175:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2176:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
2177:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @{
2178:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 94


2179:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2180:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2181:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Enable the selected ADC.
2182:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
2183:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
2184:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   If low power mode AutoPowerOff is enabled, power-on/off phases are
2185:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         performed automatically by hardware.
2186:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         In this mode, this function is useless and must not be called because 
2187:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         flag ADC_FLAG_RDY is not usable.
2188:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         Therefore, this function must be called under condition of
2189:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
2190:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
2191:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
2192:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2193:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
2194:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3144              		.loc 1 2194 1
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 16
 3147              		@ frame_needed = 1, uses_anonymous_args = 0
 3148 0000 80B5     		push	{r7, lr}
 3149              	.LCFI66:
 3150              		.cfi_def_cfa_offset 8
 3151              		.cfi_offset 7, -8
 3152              		.cfi_offset 14, -4
 3153 0002 84B0     		sub	sp, sp, #16
 3154              	.LCFI67:
 3155              		.cfi_def_cfa_offset 24
 3156 0004 00AF     		add	r7, sp, #0
 3157              	.LCFI68:
 3158              		.cfi_def_cfa_register 7
 3159 0006 7860     		str	r0, [r7, #4]
2195:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3160              		.loc 1 2195 12
 3161 0008 0023     		movs	r3, #0
 3162 000a FB60     		str	r3, [r7, #12]
2196:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 3163              		.loc 1 2196 17
 3164 000c 0023     		movs	r3, #0
 3165 000e BB60     		str	r3, [r7, #8]
2197:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2198:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
2199:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
2200:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
2201:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
2202:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 3166              		.loc 1 2202 7
 3167 0010 7B68     		ldr	r3, [r7, #4]
 3168 0012 1B68     		ldr	r3, [r3]
 3169 0014 9B68     		ldr	r3, [r3, #8]
 3170 0016 0322     		movs	r2, #3
 3171 0018 1340     		ands	r3, r2
 3172 001a 012B     		cmp	r3, #1
 3173 001c 12D1     		bne	.L156
 3174              		.loc 1 2202 7 is_stmt 0 discriminator 1
 3175 001e 7B68     		ldr	r3, [r7, #4]
 3176 0020 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 95


 3177 0022 1B68     		ldr	r3, [r3]
 3178 0024 0122     		movs	r2, #1
 3179 0026 1340     		ands	r3, r2
 3180 0028 012B     		cmp	r3, #1
 3181 002a 09D0     		beq	.L157
 3182              		.loc 1 2202 7 discriminator 4
 3183 002c 7B68     		ldr	r3, [r7, #4]
 3184 002e 1B68     		ldr	r3, [r3]
 3185 0030 DA68     		ldr	r2, [r3, #12]
 3186 0032 8023     		movs	r3, #128
 3187 0034 1B02     		lsls	r3, r3, #8
 3188 0036 1A40     		ands	r2, r3
 3189 0038 8023     		movs	r3, #128
 3190 003a 1B02     		lsls	r3, r3, #8
 3191 003c 9A42     		cmp	r2, r3
 3192 003e 01D1     		bne	.L156
 3193              	.L157:
 3194              		.loc 1 2202 7 discriminator 5
 3195 0040 0123     		movs	r3, #1
 3196 0042 00E0     		b	.L158
 3197              	.L156:
 3198              		.loc 1 2202 7 discriminator 6
 3199 0044 0023     		movs	r3, #0
 3200              	.L158:
 3201              		.loc 1 2202 6 is_stmt 1 discriminator 8
 3202 0046 002B     		cmp	r3, #0
 3203 0048 52D1     		bne	.L159
2203:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2204:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
2205:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 3204              		.loc 1 2205 9
 3205 004a 7B68     		ldr	r3, [r7, #4]
 3206 004c 1B68     		ldr	r3, [r3]
 3207 004e 9B68     		ldr	r3, [r3, #8]
 3208 0050 2A4A     		ldr	r2, .L166
 3209 0052 1340     		ands	r3, r2
 3210              		.loc 1 2205 8
 3211 0054 0DD0     		beq	.L160
2206:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2207:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
2208:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3212              		.loc 1 2208 7
 3213 0056 7B68     		ldr	r3, [r7, #4]
 3214 0058 9B6B     		ldr	r3, [r3, #56]
 3215 005a 1022     		movs	r2, #16
 3216 005c 1A43     		orrs	r2, r3
 3217 005e 7B68     		ldr	r3, [r7, #4]
 3218 0060 9A63     		str	r2, [r3, #56]
2209:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2210:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
2211:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3219              		.loc 1 2211 7
 3220 0062 7B68     		ldr	r3, [r7, #4]
 3221 0064 DB6B     		ldr	r3, [r3, #60]
 3222 0066 0122     		movs	r2, #1
 3223 0068 1A43     		orrs	r2, r3
 3224 006a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 96


 3225 006c DA63     		str	r2, [r3, #60]
2212:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2213:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
 3226              		.loc 1 2213 14
 3227 006e 0123     		movs	r3, #1
 3228 0070 3FE0     		b	.L161
 3229              	.L160:
2214:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2215:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2216:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Enable the ADC peripheral */
2217:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 3230              		.loc 1 2217 5
 3231 0072 7B68     		ldr	r3, [r7, #4]
 3232 0074 1B68     		ldr	r3, [r3]
 3233 0076 9A68     		ldr	r2, [r3, #8]
 3234 0078 7B68     		ldr	r3, [r7, #4]
 3235 007a 1B68     		ldr	r3, [r3]
 3236 007c 0121     		movs	r1, #1
 3237 007e 0A43     		orrs	r2, r1
 3238 0080 9A60     		str	r2, [r3, #8]
2218:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2219:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Delay for ADC stabilization time */
2220:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
2221:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 3239              		.loc 1 2221 42
 3240 0082 1F4B     		ldr	r3, .L166+4
 3241 0084 1B68     		ldr	r3, [r3]
 3242 0086 1F49     		ldr	r1, .L166+8
 3243 0088 1800     		movs	r0, r3
 3244 008a FFF7FEFF 		bl	__aeabi_uidiv
 3245 008e 0300     		movs	r3, r0
 3246              		.loc 1 2221 21
 3247 0090 BB60     		str	r3, [r7, #8]
2222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3248              		.loc 1 2222 10
 3249 0092 02E0     		b	.L162
 3250              	.L163:
2223:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2224:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       wait_loop_index--;
 3251              		.loc 1 2224 22
 3252 0094 BB68     		ldr	r3, [r7, #8]
 3253 0096 013B     		subs	r3, r3, #1
 3254 0098 BB60     		str	r3, [r7, #8]
 3255              	.L162:
2222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3256              		.loc 1 2222 27
 3257 009a BB68     		ldr	r3, [r7, #8]
2222:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3258              		.loc 1 2222 10
 3259 009c 002B     		cmp	r3, #0
 3260 009e F9D1     		bne	.L163
2225:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2226:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2227:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2228:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3261              		.loc 1 2228 17
 3262 00a0 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 97


 3263 00a4 0300     		movs	r3, r0
 3264 00a6 FB60     		str	r3, [r7, #12]
2229:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2230:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
2231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 3265              		.loc 1 2231 10
 3266 00a8 1BE0     		b	.L164
 3267              	.L165:
2232:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2233:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 3268              		.loc 1 2233 11
 3269 00aa FFF7FEFF 		bl	HAL_GetTick
 3270 00ae 0200     		movs	r2, r0
 3271              		.loc 1 2233 25
 3272 00b0 FB68     		ldr	r3, [r7, #12]
 3273 00b2 D31A     		subs	r3, r2, r3
 3274              		.loc 1 2233 9
 3275 00b4 022B     		cmp	r3, #2
 3276 00b6 14D9     		bls	.L164
2234:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2235:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2236:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 3277              		.loc 1 2236 12
 3278 00b8 7B68     		ldr	r3, [r7, #4]
 3279 00ba 1B68     		ldr	r3, [r3]
 3280 00bc 1B68     		ldr	r3, [r3]
 3281 00be 0122     		movs	r2, #1
 3282 00c0 1340     		ands	r3, r2
 3283              		.loc 1 2236 11
 3284 00c2 012B     		cmp	r3, #1
 3285 00c4 0DD0     		beq	.L164
2237:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2238:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Update ADC state machine to error */
2239:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3286              		.loc 1 2239 11
 3287 00c6 7B68     		ldr	r3, [r7, #4]
 3288 00c8 9B6B     		ldr	r3, [r3, #56]
 3289 00ca 1022     		movs	r2, #16
 3290 00cc 1A43     		orrs	r2, r3
 3291 00ce 7B68     		ldr	r3, [r7, #4]
 3292 00d0 9A63     		str	r2, [r3, #56]
2240:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2241:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2242:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3293              		.loc 1 2242 11
 3294 00d2 7B68     		ldr	r3, [r7, #4]
 3295 00d4 DB6B     		ldr	r3, [r3, #60]
 3296 00d6 0122     		movs	r2, #1
 3297 00d8 1A43     		orrs	r2, r3
 3298 00da 7B68     		ldr	r3, [r7, #4]
 3299 00dc DA63     		str	r2, [r3, #60]
2243:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2244:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           return HAL_ERROR;
 3300              		.loc 1 2244 18
 3301 00de 0123     		movs	r3, #1
 3302 00e0 07E0     		b	.L161
 3303              	.L164:
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 98


2231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3304              		.loc 1 2231 11
 3305 00e2 7B68     		ldr	r3, [r7, #4]
 3306 00e4 1B68     		ldr	r3, [r3]
 3307 00e6 1B68     		ldr	r3, [r3]
 3308 00e8 0122     		movs	r2, #1
 3309 00ea 1340     		ands	r3, r2
2231:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3310              		.loc 1 2231 10
 3311 00ec 012B     		cmp	r3, #1
 3312 00ee DCD1     		bne	.L165
 3313              	.L159:
2245:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2246:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2247:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2248:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2249:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
2250:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2251:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 3314              		.loc 1 2251 10
 3315 00f0 0023     		movs	r3, #0
 3316              	.L161:
2252:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3317              		.loc 1 2252 1
 3318 00f2 1800     		movs	r0, r3
 3319 00f4 BD46     		mov	sp, r7
 3320 00f6 04B0     		add	sp, sp, #16
 3321              		@ sp needed
 3322 00f8 80BD     		pop	{r7, pc}
 3323              	.L167:
 3324 00fa C046     		.align	2
 3325              	.L166:
 3326 00fc 17000080 		.word	-2147483625
 3327 0100 00000000 		.word	SystemCoreClock
 3328 0104 40420F00 		.word	1000000
 3329              		.cfi_endproc
 3330              	.LFE62:
 3332              		.section	.text.ADC_Disable,"ax",%progbits
 3333              		.align	1
 3334              		.syntax unified
 3335              		.code	16
 3336              		.thumb_func
 3338              	ADC_Disable:
 3339              	.LFB63:
2253:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2254:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2255:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Disable the selected ADC.
2256:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2257:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped.
2258:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
2259:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
2260:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2261:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
2262:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3340              		.loc 1 2262 1
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 99


 3343              		@ frame_needed = 1, uses_anonymous_args = 0
 3344 0000 80B5     		push	{r7, lr}
 3345              	.LCFI69:
 3346              		.cfi_def_cfa_offset 8
 3347              		.cfi_offset 7, -8
 3348              		.cfi_offset 14, -4
 3349 0002 84B0     		sub	sp, sp, #16
 3350              	.LCFI70:
 3351              		.cfi_def_cfa_offset 24
 3352 0004 00AF     		add	r7, sp, #0
 3353              	.LCFI71:
 3354              		.cfi_def_cfa_register 7
 3355 0006 7860     		str	r0, [r7, #4]
2263:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3356              		.loc 1 2263 12
 3357 0008 0023     		movs	r3, #0
 3358 000a FB60     		str	r3, [r7, #12]
2264:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2265:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
2266:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
2267:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /*       disabled.                                                          */
2268:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 3359              		.loc 1 2268 7
 3360 000c 7B68     		ldr	r3, [r7, #4]
 3361 000e 1B68     		ldr	r3, [r3]
 3362 0010 9B68     		ldr	r3, [r3, #8]
 3363 0012 0322     		movs	r2, #3
 3364 0014 1340     		ands	r3, r2
 3365 0016 012B     		cmp	r3, #1
 3366 0018 12D1     		bne	.L169
 3367              		.loc 1 2268 7 is_stmt 0 discriminator 1
 3368 001a 7B68     		ldr	r3, [r7, #4]
 3369 001c 1B68     		ldr	r3, [r3]
 3370 001e 1B68     		ldr	r3, [r3]
 3371 0020 0122     		movs	r2, #1
 3372 0022 1340     		ands	r3, r2
 3373 0024 012B     		cmp	r3, #1
 3374 0026 09D0     		beq	.L170
 3375              		.loc 1 2268 7 discriminator 4
 3376 0028 7B68     		ldr	r3, [r7, #4]
 3377 002a 1B68     		ldr	r3, [r3]
 3378 002c DA68     		ldr	r2, [r3, #12]
 3379 002e 8023     		movs	r3, #128
 3380 0030 1B02     		lsls	r3, r3, #8
 3381 0032 1A40     		ands	r2, r3
 3382 0034 8023     		movs	r3, #128
 3383 0036 1B02     		lsls	r3, r3, #8
 3384 0038 9A42     		cmp	r2, r3
 3385 003a 01D1     		bne	.L169
 3386              	.L170:
 3387              		.loc 1 2268 7 discriminator 5
 3388 003c 0123     		movs	r3, #1
 3389 003e 00E0     		b	.L171
 3390              	.L169:
 3391              		.loc 1 2268 7 discriminator 6
 3392 0040 0023     		movs	r3, #0
 3393              	.L171:
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 100


 3394              		.loc 1 2268 6 is_stmt 1 discriminator 8
 3395 0042 002B     		cmp	r3, #0
 3396 0044 48D0     		beq	.L172
2269:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2270:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
2271:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 3397              		.loc 1 2271 9
 3398 0046 7B68     		ldr	r3, [r7, #4]
 3399 0048 1B68     		ldr	r3, [r3]
 3400 004a 9B68     		ldr	r3, [r3, #8]
 3401 004c 0522     		movs	r2, #5
 3402 004e 1340     		ands	r3, r2
 3403              		.loc 1 2271 8
 3404 0050 012B     		cmp	r3, #1
 3405 0052 10D1     		bne	.L173
2272:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2273:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Disable the ADC peripheral */
2274:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       __HAL_ADC_DISABLE(hadc);
 3406              		.loc 1 2274 7
 3407 0054 7B68     		ldr	r3, [r7, #4]
 3408 0056 1B68     		ldr	r3, [r3]
 3409 0058 9A68     		ldr	r2, [r3, #8]
 3410 005a 7B68     		ldr	r3, [r7, #4]
 3411 005c 1B68     		ldr	r3, [r3]
 3412 005e 0221     		movs	r1, #2
 3413 0060 0A43     		orrs	r2, r1
 3414 0062 9A60     		str	r2, [r3, #8]
 3415 0064 7B68     		ldr	r3, [r7, #4]
 3416 0066 1B68     		ldr	r3, [r3]
 3417 0068 0322     		movs	r2, #3
 3418 006a 1A60     		str	r2, [r3]
2275:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2276:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     else
2277:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2278:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Update ADC state machine to error */
2279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2280:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2281:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
2282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2283:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       return HAL_ERROR;
2285:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2286:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****      
2287:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2288:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2289:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3419              		.loc 1 2289 17
 3420 006c FFF7FEFF 		bl	HAL_GetTick
 3421 0070 0300     		movs	r3, r0
 3422 0072 FB60     		str	r3, [r7, #12]
2290:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 3423              		.loc 1 2291 10
 3424 0074 29E0     		b	.L176
 3425              	.L173:
2279:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
 3426              		.loc 1 2279 7
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 101


 3427 0076 7B68     		ldr	r3, [r7, #4]
 3428 0078 9B6B     		ldr	r3, [r3, #56]
 3429 007a 1022     		movs	r2, #16
 3430 007c 1A43     		orrs	r2, r3
 3431 007e 7B68     		ldr	r3, [r7, #4]
 3432 0080 9A63     		str	r2, [r3, #56]
2282:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
 3433              		.loc 1 2282 7
 3434 0082 7B68     		ldr	r3, [r7, #4]
 3435 0084 DB6B     		ldr	r3, [r3, #60]
 3436 0086 0122     		movs	r2, #1
 3437 0088 1A43     		orrs	r2, r3
 3438 008a 7B68     		ldr	r3, [r7, #4]
 3439 008c DA63     		str	r2, [r3, #60]
2284:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
 3440              		.loc 1 2284 14
 3441 008e 0123     		movs	r3, #1
 3442 0090 23E0     		b	.L175
 3443              	.L177:
2292:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2293:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 3444              		.loc 1 2293 11
 3445 0092 FFF7FEFF 		bl	HAL_GetTick
 3446 0096 0200     		movs	r2, r0
 3447              		.loc 1 2293 25
 3448 0098 FB68     		ldr	r3, [r7, #12]
 3449 009a D31A     		subs	r3, r2, r3
 3450              		.loc 1 2293 9
 3451 009c 022B     		cmp	r3, #2
 3452 009e 14D9     		bls	.L176
2294:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2295:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2296:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 3453              		.loc 1 2296 12
 3454 00a0 7B68     		ldr	r3, [r7, #4]
 3455 00a2 1B68     		ldr	r3, [r3]
 3456 00a4 9B68     		ldr	r3, [r3, #8]
 3457 00a6 0122     		movs	r2, #1
 3458 00a8 1340     		ands	r3, r2
 3459              		.loc 1 2296 11
 3460 00aa 012B     		cmp	r3, #1
 3461 00ac 0DD1     		bne	.L176
2297:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2298:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Update ADC state machine to error */
2299:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3462              		.loc 1 2299 11
 3463 00ae 7B68     		ldr	r3, [r7, #4]
 3464 00b0 9B6B     		ldr	r3, [r3, #56]
 3465 00b2 1022     		movs	r2, #16
 3466 00b4 1A43     		orrs	r2, r3
 3467 00b6 7B68     		ldr	r3, [r7, #4]
 3468 00b8 9A63     		str	r2, [r3, #56]
2300:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2301:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2302:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3469              		.loc 1 2302 11
 3470 00ba 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 102


 3471 00bc DB6B     		ldr	r3, [r3, #60]
 3472 00be 0122     		movs	r2, #1
 3473 00c0 1A43     		orrs	r2, r3
 3474 00c2 7B68     		ldr	r3, [r7, #4]
 3475 00c4 DA63     		str	r2, [r3, #60]
2303:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2304:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           return HAL_ERROR;
 3476              		.loc 1 2304 18
 3477 00c6 0123     		movs	r3, #1
 3478 00c8 07E0     		b	.L175
 3479              	.L176:
2291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3480              		.loc 1 2291 11
 3481 00ca 7B68     		ldr	r3, [r7, #4]
 3482 00cc 1B68     		ldr	r3, [r3]
 3483 00ce 9B68     		ldr	r3, [r3, #8]
 3484 00d0 0122     		movs	r2, #1
 3485 00d2 1340     		ands	r3, r2
2291:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3486              		.loc 1 2291 10
 3487 00d4 012B     		cmp	r3, #1
 3488 00d6 DCD0     		beq	.L177
 3489              	.L172:
2305:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2306:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2307:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2308:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2309:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2310:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2311:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 3490              		.loc 1 2311 10
 3491 00d8 0023     		movs	r3, #0
 3492              	.L175:
2312:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3493              		.loc 1 2312 1
 3494 00da 1800     		movs	r0, r3
 3495 00dc BD46     		mov	sp, r7
 3496 00de 04B0     		add	sp, sp, #16
 3497              		@ sp needed
 3498 00e0 80BD     		pop	{r7, pc}
 3499              		.cfi_endproc
 3500              	.LFE63:
 3502              		.section	.text.ADC_ConversionStop,"ax",%progbits
 3503              		.align	1
 3504              		.syntax unified
 3505              		.code	16
 3506              		.thumb_func
 3508              	ADC_ConversionStop:
 3509              	.LFB64:
2313:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2314:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2315:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2316:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  Stop ADC conversion.
2317:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2318:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   *         stopped to disable the ADC.
2319:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hadc ADC handle
2320:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval HAL status.
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 103


2321:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2322:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
2323:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3510              		.loc 1 2323 1
 3511              		.cfi_startproc
 3512              		@ args = 0, pretend = 0, frame = 16
 3513              		@ frame_needed = 1, uses_anonymous_args = 0
 3514 0000 80B5     		push	{r7, lr}
 3515              	.LCFI72:
 3516              		.cfi_def_cfa_offset 8
 3517              		.cfi_offset 7, -8
 3518              		.cfi_offset 14, -4
 3519 0002 84B0     		sub	sp, sp, #16
 3520              	.LCFI73:
 3521              		.cfi_def_cfa_offset 24
 3522 0004 00AF     		add	r7, sp, #0
 3523              	.LCFI74:
 3524              		.cfi_def_cfa_register 7
 3525 0006 7860     		str	r0, [r7, #4]
2324:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3526              		.loc 1 2324 12
 3527 0008 0023     		movs	r3, #0
 3528 000a FB60     		str	r3, [r7, #12]
2325:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2326:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Check the parameters */
2327:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2328:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2329:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2330:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* this function if not needed.                                             */
2331:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 3529              		.loc 1 2331 7
 3530 000c 7B68     		ldr	r3, [r7, #4]
 3531 000e 1B68     		ldr	r3, [r3]
 3532 0010 9B68     		ldr	r3, [r3, #8]
 3533 0012 0422     		movs	r2, #4
 3534 0014 1340     		ands	r3, r2
 3535              		.loc 1 2331 6
 3536 0016 3AD0     		beq	.L179
2332:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2333:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2334:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2335:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 3537              		.loc 1 2336 9
 3538 0018 7B68     		ldr	r3, [r7, #4]
 3539 001a 1B68     		ldr	r3, [r3]
 3540 001c 9B68     		ldr	r3, [r3, #8]
 3541 001e 0422     		movs	r2, #4
 3542 0020 1340     		ands	r3, r2
 3543              		.loc 1 2336 8
 3544 0022 042B     		cmp	r3, #4
 3545 0024 0DD1     		bne	.L180
2337:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 3546              		.loc 1 2337 9 discriminator 1
 3547 0026 7B68     		ldr	r3, [r7, #4]
 3548 0028 1B68     		ldr	r3, [r3]
 3549 002a 9B68     		ldr	r3, [r3, #8]
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 104


 3550 002c 0222     		movs	r2, #2
 3551 002e 1340     		ands	r3, r2
2336:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 3552              		.loc 1 2336 60 discriminator 1
 3553 0030 07D1     		bne	.L180
2338:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2339:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* Stop conversions on regular group */
2340:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       hadc->Instance->CR |= ADC_CR_ADSTP;
 3554              		.loc 1 2340 11
 3555 0032 7B68     		ldr	r3, [r7, #4]
 3556 0034 1B68     		ldr	r3, [r3]
 3557              		.loc 1 2340 26
 3558 0036 9A68     		ldr	r2, [r3, #8]
 3559              		.loc 1 2340 11
 3560 0038 7B68     		ldr	r3, [r7, #4]
 3561 003a 1B68     		ldr	r3, [r3]
 3562              		.loc 1 2340 26
 3563 003c 1021     		movs	r1, #16
 3564 003e 0A43     		orrs	r2, r1
 3565 0040 9A60     		str	r2, [r3, #8]
 3566              	.L180:
2341:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2342:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2343:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
2344:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Get tick count */
2345:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3567              		.loc 1 2345 17
 3568 0042 FFF7FEFF 		bl	HAL_GetTick
 3569 0046 0300     		movs	r3, r0
 3570 0048 FB60     		str	r3, [r7, #12]
2346:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       
2347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 3571              		.loc 1 2347 10
 3572 004a 1AE0     		b	.L181
 3573              	.L183:
2348:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2349:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 3574              		.loc 1 2349 11
 3575 004c FFF7FEFF 		bl	HAL_GetTick
 3576 0050 0200     		movs	r2, r0
 3577              		.loc 1 2349 25
 3578 0052 FB68     		ldr	r3, [r7, #12]
 3579 0054 D31A     		subs	r3, r2, r3
 3580              		.loc 1 2349 9
 3581 0056 022B     		cmp	r3, #2
 3582 0058 13D9     		bls	.L181
2350:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2351:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2352:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 3583              		.loc 1 2352 17
 3584 005a 7B68     		ldr	r3, [r7, #4]
 3585 005c 1B68     		ldr	r3, [r3]
 3586              		.loc 1 2352 27
 3587 005e 9B68     		ldr	r3, [r3, #8]
 3588              		.loc 1 2352 32
 3589 0060 0422     		movs	r2, #4
 3590 0062 1340     		ands	r3, r2
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 105


 3591              		.loc 1 2352 11
 3592 0064 0DD0     		beq	.L181
2353:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2354:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Update ADC state machine to error */
2355:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3593              		.loc 1 2355 11
 3594 0066 7B68     		ldr	r3, [r7, #4]
 3595 0068 9B6B     		ldr	r3, [r3, #56]
 3596 006a 1022     		movs	r2, #16
 3597 006c 1A43     		orrs	r2, r3
 3598 006e 7B68     		ldr	r3, [r7, #4]
 3599 0070 9A63     		str	r2, [r3, #56]
2356:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2357:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2358:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3600              		.loc 1 2358 11
 3601 0072 7B68     		ldr	r3, [r7, #4]
 3602 0074 DB6B     		ldr	r3, [r3, #60]
 3603 0076 0122     		movs	r2, #1
 3604 0078 1A43     		orrs	r2, r3
 3605 007a 7B68     		ldr	r3, [r7, #4]
 3606 007c DA63     		str	r2, [r3, #60]
2359:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2360:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           return HAL_ERROR;
 3607              		.loc 1 2360 18
 3608 007e 0123     		movs	r3, #1
 3609 0080 06E0     		b	.L182
 3610              	.L181:
2347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3611              		.loc 1 2347 16
 3612 0082 7B68     		ldr	r3, [r7, #4]
 3613 0084 1B68     		ldr	r3, [r3]
2347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3614              		.loc 1 2347 26
 3615 0086 9B68     		ldr	r3, [r3, #8]
2347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3616              		.loc 1 2347 31
 3617 0088 0422     		movs	r2, #4
 3618 008a 1340     		ands	r3, r2
2347:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
 3619              		.loc 1 2347 10
 3620 008c DED1     		bne	.L183
 3621              	.L179:
2361:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2362:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2363:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2364:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2365:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****    
2366:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Return HAL status */
2367:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   return HAL_OK;
 3622              		.loc 1 2367 10
 3623 008e 0023     		movs	r3, #0
 3624              	.L182:
2368:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3625              		.loc 1 2368 1
 3626 0090 1800     		movs	r0, r3
 3627 0092 BD46     		mov	sp, r7
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 106


 3628 0094 04B0     		add	sp, sp, #16
 3629              		@ sp needed
 3630 0096 80BD     		pop	{r7, pc}
 3631              		.cfi_endproc
 3632              	.LFE64:
 3634              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 3635              		.align	1
 3636              		.syntax unified
 3637              		.code	16
 3638              		.thumb_func
 3640              	ADC_DMAConvCplt:
 3641              	.LFB65:
2369:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2370:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2371:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2372:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2373:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2374:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2375:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2376:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2377:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3642              		.loc 1 2377 1
 3643              		.cfi_startproc
 3644              		@ args = 0, pretend = 0, frame = 16
 3645              		@ frame_needed = 1, uses_anonymous_args = 0
 3646 0000 80B5     		push	{r7, lr}
 3647              	.LCFI75:
 3648              		.cfi_def_cfa_offset 8
 3649              		.cfi_offset 7, -8
 3650              		.cfi_offset 14, -4
 3651 0002 84B0     		sub	sp, sp, #16
 3652              	.LCFI76:
 3653              		.cfi_def_cfa_offset 24
 3654 0004 00AF     		add	r7, sp, #0
 3655              	.LCFI77:
 3656              		.cfi_def_cfa_register 7
 3657 0006 7860     		str	r0, [r7, #4]
2378:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2379:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3658              		.loc 1 2379 22
 3659 0008 7B68     		ldr	r3, [r7, #4]
 3660 000a 5B6A     		ldr	r3, [r3, #36]
 3661 000c FB60     		str	r3, [r7, #12]
2380:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2381:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2382:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 3662              		.loc 1 2382 7
 3663 000e FB68     		ldr	r3, [r7, #12]
 3664 0010 9B6B     		ldr	r3, [r3, #56]
 3665 0012 5022     		movs	r2, #80
 3666 0014 1340     		ands	r3, r2
 3667              		.loc 1 2382 6
 3668 0016 40D1     		bne	.L185
2383:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2384:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Set ADC state */
2385:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 3669              		.loc 1 2385 5
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 107


 3670 0018 FB68     		ldr	r3, [r7, #12]
 3671 001a 9B6B     		ldr	r3, [r3, #56]
 3672 001c 8022     		movs	r2, #128
 3673 001e 9200     		lsls	r2, r2, #2
 3674 0020 1A43     		orrs	r2, r3
 3675 0022 FB68     		ldr	r3, [r7, #12]
 3676 0024 9A63     		str	r2, [r3, #56]
2386:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     
2387:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2388:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 3677              		.loc 1 2389 8
 3678 0026 FB68     		ldr	r3, [r7, #12]
 3679 0028 1B68     		ldr	r3, [r3]
 3680 002a DA68     		ldr	r2, [r3, #12]
 3681 002c C023     		movs	r3, #192
 3682 002e 1B01     		lsls	r3, r3, #4
 3683 0030 1340     		ands	r3, r2
 3684              		.loc 1 2389 7
 3685 0032 2DD1     		bne	.L186
2390:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3686              		.loc 1 2390 19 discriminator 1
 3687 0034 FB68     		ldr	r3, [r7, #12]
 3688 0036 9B7E     		ldrb	r3, [r3, #26]
2389:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3689              		.loc 1 2389 51 discriminator 1
 3690 0038 002B     		cmp	r3, #0
 3691 003a 29D1     		bne	.L186
2391:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     {
2392:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2393:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 3692              		.loc 1 2393 11
 3693 003c FB68     		ldr	r3, [r7, #12]
 3694 003e 1B68     		ldr	r3, [r3]
 3695 0040 1B68     		ldr	r3, [r3]
 3696 0042 0822     		movs	r2, #8
 3697 0044 1340     		ands	r3, r2
 3698              		.loc 1 2393 9
 3699 0046 082B     		cmp	r3, #8
 3700 0048 22D1     		bne	.L186
2394:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       {
2395:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2396:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2397:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 3701              		.loc 1 2397 13
 3702 004a FB68     		ldr	r3, [r7, #12]
 3703 004c 1B68     		ldr	r3, [r3]
 3704 004e 9B68     		ldr	r3, [r3, #8]
 3705 0050 0422     		movs	r2, #4
 3706 0052 1340     		ands	r3, r2
 3707              		.loc 1 2397 12
 3708 0054 10D1     		bne	.L187
2398:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2399:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2400:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2401:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2402:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 108


2403:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 3709              		.loc 1 2403 11
 3710 0056 FB68     		ldr	r3, [r7, #12]
 3711 0058 1B68     		ldr	r3, [r3]
 3712 005a 5A68     		ldr	r2, [r3, #4]
 3713 005c FB68     		ldr	r3, [r7, #12]
 3714 005e 1B68     		ldr	r3, [r3]
 3715 0060 0C21     		movs	r1, #12
 3716 0062 8A43     		bics	r2, r1
 3717 0064 5A60     		str	r2, [r3, #4]
2404:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2405:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC state */
2406:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
 3718              		.loc 1 2406 11
 3719 0066 FB68     		ldr	r3, [r7, #12]
 3720 0068 9B6B     		ldr	r3, [r3, #56]
 3721 006a 114A     		ldr	r2, .L190
 3722 006c 1340     		ands	r3, r2
 3723 006e 0122     		movs	r2, #1
 3724 0070 1A43     		orrs	r2, r3
 3725 0072 FB68     		ldr	r3, [r7, #12]
 3726 0074 9A63     		str	r2, [r3, #56]
 3727 0076 0BE0     		b	.L186
 3728              	.L187:
2407:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2408:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2409:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2410:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         else
2411:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         {
2412:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Change ADC state to error state */
2413:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3729              		.loc 1 2413 11
 3730 0078 FB68     		ldr	r3, [r7, #12]
 3731 007a 9B6B     		ldr	r3, [r3, #56]
 3732 007c 2022     		movs	r2, #32
 3733 007e 1A43     		orrs	r2, r3
 3734 0080 FB68     		ldr	r3, [r7, #12]
 3735 0082 9A63     		str	r2, [r3, #56]
2414:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           
2415:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2416:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3736              		.loc 1 2416 11
 3737 0084 FB68     		ldr	r3, [r7, #12]
 3738 0086 DB6B     		ldr	r3, [r3, #60]
 3739 0088 0122     		movs	r2, #1
 3740 008a 1A43     		orrs	r2, r3
 3741 008c FB68     		ldr	r3, [r7, #12]
 3742 008e DA63     		str	r2, [r3, #60]
 3743              	.L186:
2417:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****         }
2418:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****       }
2419:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     }
2420:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2421:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Conversion complete callback */
2422:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2423:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2424:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #else
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 109


2425:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 3744              		.loc 1 2425 5
 3745 0090 FB68     		ldr	r3, [r7, #12]
 3746 0092 1800     		movs	r0, r3
 3747 0094 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
2426:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2427:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2428:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   else
2429:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   {
2430:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     /* Call DMA error callback */
2431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2432:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
2433:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2434:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3748              		.loc 1 2434 1
 3749 0098 05E0     		b	.L189
 3750              	.L185:
2431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 3751              		.loc 1 2431 9
 3752 009a FB68     		ldr	r3, [r7, #12]
 3753 009c 1B6B     		ldr	r3, [r3, #48]
2431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 3754              		.loc 1 2431 21
 3755 009e 1B6B     		ldr	r3, [r3, #48]
2431:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   }
 3756              		.loc 1 2431 5
 3757 00a0 7A68     		ldr	r2, [r7, #4]
 3758 00a2 1000     		movs	r0, r2
 3759 00a4 9847     		blx	r3
 3760              	.LVL0:
 3761              	.L189:
 3762              		.loc 1 2434 1
 3763 00a6 C046     		nop
 3764 00a8 BD46     		mov	sp, r7
 3765 00aa 04B0     		add	sp, sp, #16
 3766              		@ sp needed
 3767 00ac 80BD     		pop	{r7, pc}
 3768              	.L191:
 3769 00ae C046     		.align	2
 3770              	.L190:
 3771 00b0 FEFEFFFF 		.word	-258
 3772              		.cfi_endproc
 3773              	.LFE65:
 3775              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 3776              		.align	1
 3777              		.syntax unified
 3778              		.code	16
 3779              		.thumb_func
 3781              	ADC_DMAHalfConvCplt:
 3782              	.LFB66:
2435:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2436:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2437:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2438:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2439:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2440:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2441:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 110


2442:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3783              		.loc 1 2442 1
 3784              		.cfi_startproc
 3785              		@ args = 0, pretend = 0, frame = 16
 3786              		@ frame_needed = 1, uses_anonymous_args = 0
 3787 0000 80B5     		push	{r7, lr}
 3788              	.LCFI78:
 3789              		.cfi_def_cfa_offset 8
 3790              		.cfi_offset 7, -8
 3791              		.cfi_offset 14, -4
 3792 0002 84B0     		sub	sp, sp, #16
 3793              	.LCFI79:
 3794              		.cfi_def_cfa_offset 24
 3795 0004 00AF     		add	r7, sp, #0
 3796              	.LCFI80:
 3797              		.cfi_def_cfa_register 7
 3798 0006 7860     		str	r0, [r7, #4]
2443:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2444:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3799              		.loc 1 2444 22
 3800 0008 7B68     		ldr	r3, [r7, #4]
 3801 000a 5B6A     		ldr	r3, [r3, #36]
 3802 000c FB60     		str	r3, [r7, #12]
2445:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2446:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Half conversion callback */
2447:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2448:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****     hadc->ConvHalfCpltCallback(hadc);
2449:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #else
2450:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 3803              		.loc 1 2450 3
 3804 000e FB68     		ldr	r3, [r7, #12]
 3805 0010 1800     		movs	r0, r3
 3806 0012 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
2451:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2452:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3807              		.loc 1 2452 1
 3808 0016 C046     		nop
 3809 0018 BD46     		mov	sp, r7
 3810 001a 04B0     		add	sp, sp, #16
 3811              		@ sp needed
 3812 001c 80BD     		pop	{r7, pc}
 3813              		.cfi_endproc
 3814              	.LFE66:
 3816              		.section	.text.ADC_DMAError,"ax",%progbits
 3817              		.align	1
 3818              		.syntax unified
 3819              		.code	16
 3820              		.thumb_func
 3822              	ADC_DMAError:
 3823              	.LFB67:
2453:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** 
2454:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** /**
2455:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @brief  DMA error callback 
2456:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @param  hdma pointer to DMA handle.
2457:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   * @retval None
2458:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   */
2459:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 111


2460:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** {
 3824              		.loc 1 2460 1
 3825              		.cfi_startproc
 3826              		@ args = 0, pretend = 0, frame = 16
 3827              		@ frame_needed = 1, uses_anonymous_args = 0
 3828 0000 80B5     		push	{r7, lr}
 3829              	.LCFI81:
 3830              		.cfi_def_cfa_offset 8
 3831              		.cfi_offset 7, -8
 3832              		.cfi_offset 14, -4
 3833 0002 84B0     		sub	sp, sp, #16
 3834              	.LCFI82:
 3835              		.cfi_def_cfa_offset 24
 3836 0004 00AF     		add	r7, sp, #0
 3837              	.LCFI83:
 3838              		.cfi_def_cfa_register 7
 3839 0006 7860     		str	r0, [r7, #4]
2461:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2462:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3840              		.loc 1 2462 22
 3841 0008 7B68     		ldr	r3, [r7, #4]
 3842 000a 5B6A     		ldr	r3, [r3, #36]
 3843 000c FB60     		str	r3, [r7, #12]
2463:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2464:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC state */
2465:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3844              		.loc 1 2465 3
 3845 000e FB68     		ldr	r3, [r7, #12]
 3846 0010 9B6B     		ldr	r3, [r3, #56]
 3847 0012 4022     		movs	r2, #64
 3848 0014 1A43     		orrs	r2, r3
 3849 0016 FB68     		ldr	r3, [r7, #12]
 3850 0018 9A63     		str	r2, [r3, #56]
2466:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2467:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2468:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 3851              		.loc 1 2468 3
 3852 001a FB68     		ldr	r3, [r7, #12]
 3853 001c DB6B     		ldr	r3, [r3, #60]
 3854 001e 0422     		movs	r2, #4
 3855 0020 1A43     		orrs	r2, r3
 3856 0022 FB68     		ldr	r3, [r7, #12]
 3857 0024 DA63     		str	r2, [r3, #60]
2469:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   
2470:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   /* Error callback */
2471:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2472:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2473:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #else
2474:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 3858              		.loc 1 2474 3
 3859 0026 FB68     		ldr	r3, [r7, #12]
 3860 0028 1800     		movs	r0, r3
 3861 002a FFF7FEFF 		bl	HAL_ADC_ErrorCallback
2475:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2476:Drivers/STM32F0xx_HAL_Driver/Src/stm32f0xx_hal_adc.c **** }
 3862              		.loc 1 2476 1
 3863 002e C046     		nop
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 112


 3864 0030 BD46     		mov	sp, r7
 3865 0032 04B0     		add	sp, sp, #16
 3866              		@ sp needed
 3867 0034 80BD     		pop	{r7, pc}
 3868              		.cfi_endproc
 3869              	.LFE67:
 3871              		.text
 3872              	.Letext0:
 3873              		.file 2 "c:\\program files (x86)\\openocdarmgccbuildtools\\gcc-arm-none-eabi-10.3-2021.10-win32\\a
 3874              		.file 3 "c:\\program files (x86)\\openocdarmgccbuildtools\\gcc-arm-none-eabi-10.3-2021.10-win32\\a
 3875              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f031x6.h"
 3876              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 3877              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 3878              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 3879              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 3880              		.file 9 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 113


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_hal_adc.c
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:18     .text.HAL_ADC_Init:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:24     .text.HAL_ADC_Init:00000000 HAL_ADC_Init
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:688    .text.HAL_ADC_MspInit:00000000 HAL_ADC_MspInit
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:472    .text.HAL_ADC_Init:00000274 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:479    .text.HAL_ADC_DeInit:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:485    .text.HAL_ADC_DeInit:00000000 HAL_ADC_DeInit
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3508   .text.ADC_ConversionStop:00000000 ADC_ConversionStop
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3338   .text.ADC_Disable:00000000 ADC_Disable
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:722    .text.HAL_ADC_MspDeInit:00000000 HAL_ADC_MspDeInit
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:674    .text.HAL_ADC_DeInit:00000104 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:682    .text.HAL_ADC_MspInit:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:716    .text.HAL_ADC_MspDeInit:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:750    .text.HAL_ADC_Start:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:756    .text.HAL_ADC_Start:00000000 HAL_ADC_Start
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3142   .text.ADC_Enable:00000000 ADC_Enable
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:882    .text.HAL_ADC_Start:000000a4 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:887    .text.HAL_ADC_Stop:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:893    .text.HAL_ADC_Stop:00000000 HAL_ADC_Stop
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:987    .text.HAL_ADC_Stop:0000007c $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:992    .text.HAL_ADC_PollForConversion:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:998    .text.HAL_ADC_PollForConversion:00000000 HAL_ADC_PollForConversion
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1214   .text.HAL_ADC_PollForConversion:0000012c $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1219   .text.HAL_ADC_PollForEvent:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1225   .text.HAL_ADC_PollForEvent:00000000 HAL_ADC_PollForEvent
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1373   .text.HAL_ADC_Start_IT:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1379   .text.HAL_ADC_Start_IT:00000000 HAL_ADC_Start_IT
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1544   .text.HAL_ADC_Start_IT:000000e0 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1549   .text.HAL_ADC_Stop_IT:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1555   .text.HAL_ADC_Stop_IT:00000000 HAL_ADC_Stop_IT
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1660   .text.HAL_ADC_Stop_IT:00000090 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1665   .text.HAL_ADC_Start_DMA:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1671   .text.HAL_ADC_Start_DMA:00000000 HAL_ADC_Start_DMA
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1851   .text.HAL_ADC_Start_DMA:000000f4 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3640   .text.ADC_DMAConvCplt:00000000 ADC_DMAConvCplt
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3781   .text.ADC_DMAHalfConvCplt:00000000 ADC_DMAHalfConvCplt
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3822   .text.ADC_DMAError:00000000 ADC_DMAError
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1859   .text.HAL_ADC_Stop_DMA:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:1865   .text.HAL_ADC_Stop_DMA:00000000 HAL_ADC_Stop_DMA
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2027   .text.HAL_ADC_Stop_DMA:000000e8 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2032   .text.HAL_ADC_GetValue:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2038   .text.HAL_ADC_GetValue:00000000 HAL_ADC_GetValue
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2071   .text.HAL_ADC_IRQHandler:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2077   .text.HAL_ADC_IRQHandler:00000000 HAL_ADC_IRQHandler
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2324   .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2392   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 HAL_ADC_LevelOutOfWindowCallback
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2426   .text.HAL_ADC_ErrorCallback:00000000 HAL_ADC_ErrorCallback
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2313   .text.HAL_ADC_IRQHandler:00000144 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2318   .text.HAL_ADC_ConvCpltCallback:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2352   .text.HAL_ADC_ConvHalfCpltCallback:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2358   .text.HAL_ADC_ConvHalfCpltCallback:00000000 HAL_ADC_ConvHalfCpltCallback
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2386   .text.HAL_ADC_LevelOutOfWindowCallback:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2420   .text.HAL_ADC_ErrorCallback:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2455   .text.HAL_ADC_ConfigChannel:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2461   .text.HAL_ADC_ConfigChannel:00000000 HAL_ADC_ConfigChannel
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2839   .text.HAL_ADC_ConfigChannel:00000200 $d
ARM GAS  C:\Users\mason\AppData\Local\Temp\ccHolgn1.s 			page 114


C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2850   .text.HAL_ADC_AnalogWDGConfig:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:2856   .text.HAL_ADC_AnalogWDGConfig:00000000 HAL_ADC_AnalogWDGConfig
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3057   .text.HAL_ADC_AnalogWDGConfig:00000114 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3063   .text.HAL_ADC_GetState:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3069   .text.HAL_ADC_GetState:00000000 HAL_ADC_GetState
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3100   .text.HAL_ADC_GetError:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3106   .text.HAL_ADC_GetError:00000000 HAL_ADC_GetError
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3137   .text.ADC_Enable:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3326   .text.ADC_Enable:000000fc $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3333   .text.ADC_Disable:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3503   .text.ADC_ConversionStop:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3635   .text.ADC_DMAConvCplt:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3771   .text.ADC_DMAConvCplt:000000b0 $d
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3776   .text.ADC_DMAHalfConvCplt:00000000 $t
C:\Users\mason\AppData\Local\Temp\ccHolgn1.s:3817   .text.ADC_DMAError:00000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
__aeabi_uidiv
SystemCoreClock
